<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="3.16@d03e5ef057d6adc656c0ff7e166c50b73b4f48f3">
  <file src="src/Annotation/AnnotationCollection.php">
    <MixedArgument occurrences="1">
      <code>$annotation</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$annotation</code>
    </MixedAssignment>
  </file>
  <file src="src/Annotation/AnnotationManager.php">
    <DocblockTypeContradiction occurrences="1">
      <code>null === $this-&gt;events</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch occurrences="1">
      <code>AnnotationManager</code>
    </ImplementedReturnTypeMismatch>
    <LessSpecificReturnStatement occurrences="1">
      <code>is_object($annotation) ? $annotation : false</code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType occurrences="1">
      <code>$r</code>
    </MissingClosureParamType>
    <MissingConstructor occurrences="1">
      <code>$events</code>
    </MissingConstructor>
    <MixedAssignment occurrences="1">
      <code>$annotation</code>
    </MixedAssignment>
    <MoreSpecificReturnType occurrences="1">
      <code>false|\stdClass</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Annotation/Parser/DoctrineAnnotationParser.php">
    <DeprecatedMethod occurrences="1"/>
    <DocblockTypeContradiction occurrences="2">
      <code>! is_array($annotations) &amp;&amp; ! $annotations instanceof Traversable</code>
      <code>$this-&gt;docParser instanceof DocParser</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch occurrences="2">
      <code>DoctrineAnnotationParser</code>
      <code>DoctrineAnnotationParser</code>
    </ImplementedReturnTypeMismatch>
    <LessSpecificReturnStatement occurrences="1">
      <code>$annotation</code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType occurrences="1">
      <code>$class</code>
    </MissingClosureParamType>
    <MixedArgument occurrences="2">
      <code>$annotationString</code>
      <code>$class</code>
    </MixedArgument>
    <MixedArrayOffset occurrences="2">
      <code>$this-&gt;allowedAnnotations[$annotationClass]</code>
      <code>$this-&gt;allowedAnnotations[$annotation]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="4">
      <code>$annotation</code>
      <code>$annotation</code>
      <code>$annotationClass</code>
      <code>$annotationString</code>
    </MixedAssignment>
    <MoreSpecificImplementedParamType occurrences="1">
      <code>$annotation</code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType occurrences="1">
      <code>false|\stdClass</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$docParser</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Annotation/Parser/GenericAnnotationParser.php">
    <DocblockTypeContradiction occurrences="1">
      <code>! is_array($annotations) &amp;&amp; ! $annotations instanceof Traversable</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch occurrences="2">
      <code>GenericAnnotationParser</code>
      <code>false|AnnotationInterface</code>
    </ImplementedReturnTypeMismatch>
    <MixedArgument occurrences="6">
      <code>$annotation</code>
      <code>$class</code>
      <code>$class</code>
      <code>$class</code>
      <code>$class</code>
      <code>$content</code>
    </MixedArgument>
    <MixedAssignment occurrences="4">
      <code>$annotation</code>
      <code>$class</code>
      <code>$class</code>
      <code>$content</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall occurrences="1">
      <code>new $annotation()</code>
    </MixedMethodCall>
    <MixedReturnStatement occurrences="1">
      <code>$class</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType occurrences="1">
      <code>$annotation</code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="src/DeclareStatement.php">
    <MissingParamType occurrences="1">
      <code>$value</code>
    </MissingParamType>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$directive</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="2">
      <code>$this-&gt;value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>self</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>self::{$method}($value)</code>
    </MixedReturnStatement>
  </file>
  <file src="src/Generator/AbstractGenerator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>! is_array($options) &amp;&amp; ! $options instanceof Traversable</code>
    </DocblockTypeContradiction>
    <InvalidReturnStatement occurrences="1">
      <code>$this-&gt;indentation</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>string</code>
    </InvalidReturnType>
    <MixedAssignment occurrences="1">
      <code>$optionValue</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$optionName</code>
    </MixedOperand>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$sourceContent</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/AbstractMemberGenerator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>$docBlock instanceof DocBlockGenerator</code>
    </DocblockTypeContradiction>
    <MixedAssignment occurrences="2">
      <code>$flag</code>
      <code>$this-&gt;flags</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$flag</code>
    </MixedOperand>
  </file>
  <file src="src/Generator/BodyGenerator.php">
    <PropertyNotSetInConstructor occurrences="2">
      <code>$content</code>
      <code>BodyGenerator</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/ClassGenerator.php">
    <DocblockTypeContradiction occurrences="3">
      <code>is_string($name)</code>
      <code>is_string($name)</code>
      <code>is_string($name)</code>
    </DocblockTypeContradiction>
    <InvalidArgument occurrences="1">
      <code>[$this, 'validateConstantValue']</code>
    </InvalidArgument>
    <InvalidNullableReturnType occurrences="1">
      <code>string</code>
    </InvalidNullableReturnType>
    <InvalidOperand occurrences="3">
      <code>$this-&gt;flags</code>
      <code>$this-&gt;flags</code>
      <code>$this-&gt;flags</code>
    </InvalidOperand>
    <InvalidPropertyAssignmentValue occurrences="1">
      <code>0x00</code>
    </InvalidPropertyAssignmentValue>
    <InvalidScalarArgument occurrences="4">
      <code>self::FLAG_ABSTRACT</code>
      <code>self::FLAG_ABSTRACT</code>
      <code>self::FLAG_FINAL</code>
      <code>self::FLAG_FINAL</code>
    </InvalidScalarArgument>
    <MissingReturnType occurrences="4">
      <code>addTraitAlias</code>
      <code>addTraitOverride</code>
      <code>generate</code>
      <code>removeTrait</code>
    </MissingReturnType>
    <MixedArgument occurrences="16">
      <code>$array['name']</code>
      <code>$implemented</code>
      <code>$implementedInterface</code>
      <code>$this-&gt;flags &amp; ~$flag</code>
      <code>$this-&gt;flags | $flag</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>array_values($constant)</code>
      <code>array_values($method)</code>
      <code>array_values($property)</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="7">
      <code>$flag</code>
      <code>$method</code>
      <code>$property</code>
      <code>$this-&gt;flags</code>
      <code>$use</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>bool</code>
    </MixedInferredReturnType>
    <MixedOperand occurrences="5">
      <code>$flag</code>
      <code>$this-&gt;traitUsageGenerator-&gt;generate()</code>
      <code>$use</code>
      <code>static::IMPLEMENTS_KEYWORD</code>
      <code>static::OBJECT_TYPE</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;flags &amp; self::FLAG_FINAL</code>
    </MixedReturnStatement>
    <NullArgument occurrences="1">
      <code>null</code>
    </NullArgument>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;traitUsageGenerator-&gt;getUseAlias($fqnClassName)</code>
    </NullableReturnStatement>
    <PossiblyFalseArgument occurrences="2">
      <code>$classReflection-&gt;getDocBlock()</code>
      <code>strrpos($name, '\\')</code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand occurrences="1">
      <code>strrpos($name, '\\')</code>
    </PossiblyFalseOperand>
    <PossiblyInvalidMethodCall occurrences="2">
      <code>getInterfaces</code>
      <code>getName</code>
    </PossiblyInvalidMethodCall>
    <PossiblyNullOperand occurrences="1">
      <code>$namespaceAlias</code>
    </PossiblyNullOperand>
    <PropertyNotSetInConstructor occurrences="6">
      <code>$containingFileGenerator</code>
      <code>$docBlock</code>
      <code>$extendedClass</code>
      <code>$name</code>
      <code>$namespaceName</code>
      <code>ClassGenerator</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType occurrences="4">
      <code>is_array($constant)</code>
      <code>is_array($interfaces)</code>
      <code>null !== ($docBlock = $this-&gt;getDocBlock())</code>
      <code>null !== ($namespace = $this-&gt;getNamespaceName())</code>
    </RedundantConditionGivenDocblockType>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static($classReflection-&gt;getName())</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/DocBlock/Tag.php">
    <LessSpecificReturnStatement occurrences="2">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
      <code>$this-&gt;setContent($description)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="2">
      <code>Tag</code>
      <code>Tag</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="3">
      <code>Tag</code>
      <code>Tag</code>
      <code>Tag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/AbstractTypeableTag.php">
    <PropertyNotSetInConstructor occurrences="2">
      <code>$description</code>
      <code>AbstractTypeableTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/AuthorTag.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>AuthorTag</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$authorEmail</code>
      <code>$authorName</code>
      <code>AuthorTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/GenericTag.php">
    <PropertyNotSetInConstructor occurrences="3">
      <code>$content</code>
      <code>$name</code>
      <code>GenericTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/LicenseTag.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>ReturnTag</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$licenseName</code>
      <code>$url</code>
      <code>LicenseTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/MethodTag.php">
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$types</code>
    </MixedArgumentTypeCoercion>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$methodName</code>
      <code>MethodTag</code>
      <code>MethodTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/ParamTag.php">
    <LessSpecificReturnStatement occurrences="2">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
      <code>$this-&gt;setTypes($datatype)</code>
    </LessSpecificReturnStatement>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$types</code>
    </MixedArgumentTypeCoercion>
    <MoreSpecificReturnType occurrences="2">
      <code>ParamTag</code>
      <code>ParamTag</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$variableName</code>
      <code>ParamTag</code>
      <code>ParamTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/PropertyTag.php">
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$types</code>
    </MixedArgumentTypeCoercion>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$propertyName</code>
      <code>PropertyTag</code>
      <code>PropertyTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/ReturnTag.php">
    <LessSpecificReturnStatement occurrences="2">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
      <code>$this-&gt;setTypes($datatype)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="2">
      <code>ReturnTag</code>
      <code>ReturnTag</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="2">
      <code>ReturnTag</code>
      <code>ReturnTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/ThrowsTag.php">
    <PropertyNotSetInConstructor occurrences="2">
      <code>ThrowsTag</code>
      <code>ThrowsTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/VarTag.php">
    <PropertyNotSetInConstructor occurrences="2">
      <code>VarTag</code>
      <code>VarTag</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/TagManager.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$newTag</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>TagInterface</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="1">
      <code>TagManager</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlockGenerator.php">
    <DeprecatedClass occurrences="1">
      <code>new Tag()</code>
    </DeprecatedClass>
    <DocblockTypeContradiction occurrences="2">
      <code>$tag instanceof TagInterface</code>
      <code>isset(static::$tagManager)</code>
    </DocblockTypeContradiction>
    <MixedArgument occurrences="4">
      <code>$tag</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="2">
      <code>$tag</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$this-&gt;tags</code>
      <code>TagInterface[]</code>
    </MixedReturnTypeCoercion>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$longDescription</code>
      <code>$shortDescription</code>
      <code>DocBlockGenerator</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="1">
      <code>is_array($tags)</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="2">
      <code>null !== ($ld = $this-&gt;getLongDescription())</code>
      <code>null !== ($sd = $this-&gt;getShortDescription())</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod occurrences="1">
      <code>generate</code>
    </UndefinedInterfaceMethod>
    <UnsafeInstantiation occurrences="2">
      <code>new static()</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/FileGenerator.php">
    <DocblockTypeContradiction occurrences="2">
      <code>$class instanceof ClassGenerator</code>
      <code>$docBlock instanceof DocBlockGenerator</code>
    </DocblockTypeContradiction>
    <InvalidArgument occurrences="1">
      <code>$docBlock</code>
    </InvalidArgument>
    <MissingClosureParamType occurrences="1">
      <code>$value</code>
    </MissingClosureParamType>
    <MissingReturnType occurrences="1">
      <code>setDeclares</code>
    </MissingReturnType>
    <MixedArgument occurrences="16">
      <code>$alias</code>
      <code>$alias</code>
      <code>$class</code>
      <code>$class-&gt;generate()</code>
      <code>$fileUse['as']</code>
      <code>$fileUse['use']</code>
      <code>$import</code>
      <code>$import</code>
      <code>$import</code>
      <code>$uses[$useIndex][0]</code>
      <code>$uses[$useIndex][0]</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="2">
      <code>$name</code>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess occurrences="8">
      <code>$alias</code>
      <code>$fileUse['as']</code>
      <code>$fileUse['use']</code>
      <code>$import</code>
      <code>$uses[$useIndex][0]</code>
      <code>$uses[$useIndex][0]</code>
      <code>$uses[$useIndex][0]</code>
      <code>$uses[$useIndex][1]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="3">
      <code>$uses[$useIndex][2]</code>
      <code>$uses[$useIndex][2]</code>
      <code>$uses[$useIndex][2]</code>
    </MixedArrayAssignment>
    <MixedAssignment occurrences="14">
      <code>$alias</code>
      <code>$class</code>
      <code>$class</code>
      <code>$declare</code>
      <code>$fileUse</code>
      <code>$import</code>
      <code>$import</code>
      <code>$requiredFile</code>
      <code>$use</code>
      <code>$use</code>
      <code>$uses[$useIndex][2]</code>
      <code>$uses[$useIndex][2]</code>
      <code>$value</code>
      <code>list($import, $alias)</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>ClassGenerator</code>
    </MixedInferredReturnType>
    <MixedMethodCall occurrences="1">
      <code>isSourceDirty</code>
    </MixedMethodCall>
    <MixedOperand occurrences="2">
      <code>$class-&gt;generate()</code>
      <code>$requiredFile</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="2">
      <code>$this-&gt;classes[(string) $name]</code>
      <code>current($this-&gt;classes)</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$this-&gt;classes</code>
      <code>ClassGenerator[]</code>
    </MixedReturnTypeCoercion>
    <NullArgument occurrences="1">
      <code>null</code>
    </NullArgument>
    <PossiblyFalseArgument occurrences="1">
      <code>$docBlock</code>
    </PossiblyFalseArgument>
    <PossiblyNullArgument occurrences="1">
      <code>$namespace</code>
    </PossiblyNullArgument>
    <PropertyNotSetInConstructor occurrences="5">
      <code>$body</code>
      <code>$docBlock</code>
      <code>$filename</code>
      <code>$namespace</code>
      <code>FileGenerator</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType occurrences="4">
      <code>! empty($uses) &amp;&amp; is_array($uses)</code>
      <code>$docBlock &amp;&amp; $docBlock-&gt;isSourceDirty()</code>
      <code>is_array($uses)</code>
      <code>null !== ($docBlock = $this-&gt;getDocBlock())</code>
    </RedundantConditionGivenDocblockType>
    <UnsafeInstantiation occurrences="2">
      <code>new static()</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/FileGeneratorRegistry.php">
    <MissingReturnType occurrences="1">
      <code>registerFileCodeGenerator</code>
    </MissingReturnType>
  </file>
  <file src="src/Generator/GeneratorInterface.php">
    <MissingReturnType occurrences="1">
      <code>generate</code>
    </MissingReturnType>
  </file>
  <file src="src/Generator/InterfaceGenerator.php">
    <MissingParamType occurrences="1">
      <code>$extendedClass</code>
    </MissingParamType>
    <MixedArgument occurrences="7">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="2">
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument occurrences="1">
      <code>$classReflection-&gt;getDocBlock()</code>
    </PossiblyFalseArgument>
    <PropertyNotSetInConstructor occurrences="6">
      <code>InterfaceGenerator</code>
      <code>InterfaceGenerator</code>
      <code>InterfaceGenerator</code>
      <code>InterfaceGenerator</code>
      <code>InterfaceGenerator</code>
      <code>InterfaceGenerator</code>
    </PropertyNotSetInConstructor>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static($classReflection-&gt;getName())</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/MethodGenerator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>$parameter instanceof ParameterGenerator</code>
    </DocblockTypeContradiction>
    <MixedArgument occurrences="13">
      <code>$array['name']</code>
      <code>$parameter</code>
      <code>$parameterOutput</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="2">
      <code>$parameter</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$this-&gt;returnType-&gt;generate()</code>
    </MixedOperand>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionMethod-&gt;getDocBlock()</code>
    </PossiblyFalseArgument>
    <PossiblyUndefinedVariable occurrences="1">
      <code>$parameterOutput</code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor occurrences="4">
      <code>$body</code>
      <code>$docBlock</code>
      <code>MethodGenerator</code>
      <code>MethodGenerator</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="1">
      <code>method_exists($methodReflection, 'getReturnType')</code>
    </RedundantCondition>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/ParameterGenerator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>string</code>
    </InvalidNullableReturnType>
    <MixedArgument occurrences="11">
      <code>$array['name']</code>
      <code>$defaultValue</code>
      <code>$reflectionParameter-&gt;getDefaultValue()</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$this-&gt;type-&gt;generate()</code>
    </MixedOperand>
    <NullableReturnStatement occurrences="1"/>
    <PossiblyNullReference occurrences="2">
      <code>getName</code>
      <code>getParentClass</code>
    </PossiblyNullReference>
    <PropertyNotSetInConstructor occurrences="4">
      <code>$defaultValue</code>
      <code>$name</code>
      <code>$position</code>
      <code>ParameterGenerator</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="2">
      <code>method_exists($reflectionParameter, 'getType')</code>
      <code>method_exists($reflectionParameter, 'isVariadic') &amp;&amp; $reflectionParameter-&gt;isVariadic()</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>$this-&gt;defaultValue instanceof ValueGenerator</code>
    </RedundantConditionGivenDocblockType>
    <UnsafeInstantiation occurrences="1">
      <code>new static($array['name'])</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/PropertyGenerator.php">
    <DocblockTypeContradiction occurrences="2">
      <code>'null;'</code>
      <code>'null;'</code>
    </DocblockTypeContradiction>
    <MixedArgument occurrences="9">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="2">
      <code>$defaultValue</code>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionProperty-&gt;getDocBlock()</code>
    </PossiblyFalseArgument>
    <PropertyNotSetInConstructor occurrences="4">
      <code>$defaultValue</code>
      <code>$isConst</code>
      <code>PropertyGenerator</code>
      <code>PropertyGenerator</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType occurrences="3">
      <code>$defaultValue !== null</code>
      <code>$defaultValue !== null</code>
      <code>$defaultValue !== null</code>
    </RedundantConditionGivenDocblockType>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/PropertyValueGenerator.php">
    <PropertyNotSetInConstructor occurrences="2">
      <code>PropertyValueGenerator</code>
      <code>PropertyValueGenerator</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/TraitGenerator.php">
    <MixedArgument occurrences="6">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument occurrences="1">
      <code>$classReflection-&gt;getDocBlock()</code>
    </PossiblyFalseArgument>
    <PropertyNotSetInConstructor occurrences="6">
      <code>TraitGenerator</code>
      <code>TraitGenerator</code>
      <code>TraitGenerator</code>
      <code>TraitGenerator</code>
      <code>TraitGenerator</code>
      <code>TraitGenerator</code>
    </PropertyNotSetInConstructor>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static($classReflection-&gt;getName())</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/TraitUsageGenerator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>is_string($alias)</code>
    </DocblockTypeContradiction>
    <MissingReturnType occurrences="4">
      <code>addTraitAlias</code>
      <code>addTraitOverride</code>
      <code>generate</code>
      <code>removeTrait</code>
    </MissingReturnType>
    <MixedArgument occurrences="16">
      <code>$alias['alias']</code>
      <code>$alias['alias']</code>
      <code>$alias['visibility']</code>
      <code>$method</code>
      <code>$this-&gt;traitOverrides[$method]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
      <code>$traitName</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="2">
      <code>$key</code>
      <code>$key</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess occurrences="6">
      <code>$alias['alias']</code>
      <code>$alias['alias']</code>
      <code>$alias['alias']</code>
      <code>$alias['visibility']</code>
      <code>$alias['visibility']</code>
      <code>$this-&gt;traitOverrides[$method][$key]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="1">
      <code>$this-&gt;traitOverrides[$traitAndMethod][]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="7">
      <code>$this-&gt;traitAliases[$traitAndMethod]</code>
      <code>$this-&gt;traitOverrides[$method][$key]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
      <code>$this-&gt;uses[$value]</code>
      <code>$this-&gt;uses[$value]</code>
    </MixedArrayOffset>
    <MixedArrayTypeCoercion occurrences="1">
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
    </MixedArrayTypeCoercion>
    <MixedAssignment occurrences="19">
      <code>$alias</code>
      <code>$alias</code>
      <code>$insteadof</code>
      <code>$insteadofTrait</code>
      <code>$insteadofTraits</code>
      <code>$key</code>
      <code>$trait</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
      <code>$traitName</code>
      <code>$traitName</code>
      <code>$traitToRemove</code>
      <code>$traitToReplace</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand occurrences="5">
      <code>$alias['alias']</code>
      <code>$insteadofTrait</code>
      <code>$method['method']</code>
      <code>$method['traitName']</code>
      <code>current(Reflection::getModifierNames($alias['visibility']))</code>
    </MixedOperand>
    <PropertyNotSetInConstructor occurrences="1">
      <code>TraitUsageGenerator</code>
    </PropertyNotSetInConstructor>
    <TooFewArguments occurrences="1">
      <code>addTraitOverride</code>
    </TooFewArguments>
    <UndefinedMethod occurrences="1">
      <code>addAlias</code>
    </UndefinedMethod>
  </file>
  <file src="src/Generator/TraitUsageInterface.php">
    <MissingReturnType occurrences="3">
      <code>addTraitAlias</code>
      <code>addTraitOverride</code>
      <code>removeTrait</code>
    </MissingReturnType>
  </file>
  <file src="src/Generator/TypeGenerator.php">
    <InvalidScalarArgument occurrences="4">
      <code>$trimmedNullable</code>
      <code>$trimmedType</code>
      <code>$trimmedType</code>
      <code>$trimmedType</code>
    </InvalidScalarArgument>
    <MissingReturnType occurrences="1">
      <code>generate</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>$this-&gt;generate()</code>
    </MixedArgument>
    <PossiblyInvalidPropertyAssignmentValue occurrences="2">
      <code>$nullable</code>
      <code>$trimmedType</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$isInternalPhpType</code>
      <code>$nullable</code>
      <code>$type</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/ValueGenerator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>$constants instanceof SplArrayObject || $constants instanceof StdlibArrayObject</code>
    </DocblockTypeContradiction>
    <InvalidScalarArgument occurrences="4">
      <code>$this-&gt;indentation</code>
      <code>$this-&gt;indentation</code>
      <code>$this-&gt;indentation</code>
      <code>$this-&gt;indentation</code>
    </InvalidScalarArgument>
    <MissingReturnType occurrences="1">
      <code>initEnvironmentConstants</code>
    </MissingReturnType>
    <MixedArgument occurrences="2">
      <code>$n</code>
      <code>$value</code>
    </MixedArgument>
    <MixedAssignment occurrences="6">
      <code>$constant</code>
      <code>$curValue</code>
      <code>$outputParts[]</code>
      <code>$partV</code>
      <code>$v</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedMethodCall occurrences="2">
      <code>generate</code>
      <code>setArrayDepth</code>
    </MixedMethodCall>
    <MixedOperand occurrences="2">
      <code>$partV</code>
      <code>$value</code>
    </MixedOperand>
    <PropertyNotSetInConstructor occurrences="2">
      <code>$allowedTypes</code>
      <code>ValueGenerator</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="1">
      <code>'double'</code>
    </RedundantCondition>
  </file>
  <file src="src/Generic/Prototype/PrototypeClassFactory.php">
    <DocblockTypeContradiction occurrences="1">
      <code>! $this-&gt;hasPrototype($prototypeName) &amp;&amp; ! isset($this-&gt;genericPrototype)</code>
    </DocblockTypeContradiction>
    <MissingReturnType occurrences="2">
      <code>addPrototype</code>
      <code>setGenericPrototype</code>
    </MissingReturnType>
    <MixedAssignment occurrences="1">
      <code>$newPrototype</code>
    </MixedAssignment>
    <MixedClone occurrences="1">
      <code>clone $this-&gt;prototypes[$prototypeName]</code>
    </MixedClone>
    <MixedInferredReturnType occurrences="1">
      <code>PrototypeInterface</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$newPrototype</code>
    </MixedReturnStatement>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$genericPrototype</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generic/Prototype/PrototypeGenericInterface.php">
    <MissingReturnType occurrences="1">
      <code>setName</code>
    </MissingReturnType>
  </file>
  <file src="src/NameInformation.php">
    <MissingReturnType occurrences="1">
      <code>addUse</code>
    </MissingReturnType>
    <MixedArgument occurrences="3">
      <code>$as</code>
      <code>$as</code>
      <code>$use</code>
    </MixedArgument>
    <MixedAssignment occurrences="3">
      <code>$as</code>
      <code>$as</code>
      <code>$use</code>
    </MixedAssignment>
    <PossiblyInvalidArgument occurrences="1">
      <code>$use</code>
    </PossiblyInvalidArgument>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$namespace</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="1">
      <code>is_string($use)</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>$this-&gt;namespace !== null</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Reflection/ClassReflection.php">
    <FalsableReturnStatement occurrences="2">
      <code>parent::getStartLine()</code>
      <code>strstr(implode('', $lines), '{')</code>
    </FalsableReturnStatement>
    <ImplementedReturnTypeMismatch occurrences="1">
      <code>ClassReflection|bool</code>
    </ImplementedReturnTypeMismatch>
    <InvalidFalsableReturnType occurrences="2">
      <code>int</code>
      <code>string</code>
    </InvalidFalsableReturnType>
    <InvalidThrow occurrences="1">
      <code>Exception\ExceptionInterface</code>
    </InvalidThrow>
    <LessSpecificImplementedReturnType occurrences="4">
      <code>ClassReflection[]</code>
      <code>MethodReflection[]</code>
      <code>PropertyReflection[]</code>
      <code>null|array</code>
    </LessSpecificImplementedReturnType>
    <MissingConstructor occurrences="2">
      <code>$annotations</code>
      <code>$docBlock</code>
    </MissingConstructor>
    <PossiblyFalseReference occurrences="1">
      <code>getStartLine</code>
    </PossiblyFalseReference>
    <PossiblyInvalidArgument occurrences="1">
      <code>$nameInformation</code>
    </PossiblyInvalidArgument>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>$this-&gt;annotations</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainNull occurrences="1">
      <code>$traits === null</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Reflection/DocBlock/Tag/AuthorTag.php">
    <MissingConstructor occurrences="2">
      <code>$authorEmail</code>
      <code>$authorName</code>
    </MissingConstructor>
  </file>
  <file src="src/Reflection/DocBlock/Tag/GenericTag.php">
    <MissingReturnType occurrences="2">
      <code>parse</code>
      <code>setName</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="1">
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;values[$position]</code>
    </MixedReturnStatement>
    <PossiblyNullArgument occurrences="1">
      <code>$this-&gt;contentSplitCharacter</code>
    </PossiblyNullArgument>
    <PropertyNotSetInConstructor occurrences="2">
      <code>$content</code>
      <code>$name</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Reflection/DocBlock/Tag/LicenseTag.php">
    <MissingConstructor occurrences="2">
      <code>$licenseName</code>
      <code>$url</code>
    </MissingConstructor>
  </file>
  <file src="src/Reflection/DocBlock/Tag/MethodTag.php">
    <MissingConstructor occurrences="2">
      <code>$description</code>
      <code>$methodName</code>
    </MissingConstructor>
    <MixedInferredReturnType occurrences="1">
      <code>null|string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;types[0]</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$this-&gt;types</code>
      <code>getTypes</code>
    </MixedReturnTypeCoercion>
  </file>
  <file src="src/Reflection/DocBlock/Tag/ParamTag.php">
    <MissingConstructor occurrences="2">
      <code>$description</code>
      <code>$variableName</code>
    </MissingConstructor>
    <MixedInferredReturnType occurrences="1">
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;types[0]</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$this-&gt;types</code>
      <code>getTypes</code>
    </MixedReturnTypeCoercion>
  </file>
  <file src="src/Reflection/DocBlock/Tag/PropertyTag.php">
    <MissingConstructor occurrences="2">
      <code>$description</code>
      <code>$propertyName</code>
    </MissingConstructor>
    <MixedInferredReturnType occurrences="1">
      <code>null|string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;types[0]</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$this-&gt;types</code>
      <code>getTypes</code>
    </MixedReturnTypeCoercion>
  </file>
  <file src="src/Reflection/DocBlock/Tag/ReturnTag.php">
    <MissingConstructor occurrences="1">
      <code>$description</code>
    </MissingConstructor>
    <MixedInferredReturnType occurrences="1">
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;types[0]</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$this-&gt;types</code>
      <code>getTypes</code>
    </MixedReturnTypeCoercion>
  </file>
  <file src="src/Reflection/DocBlock/Tag/ThrowsTag.php">
    <LessSpecificImplementedReturnType occurrences="1">
      <code>array</code>
    </LessSpecificImplementedReturnType>
    <MissingConstructor occurrences="1">
      <code>$description</code>
    </MissingConstructor>
  </file>
  <file src="src/Reflection/DocBlock/TagManager.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$newTag</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>TagInterface</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="1">
      <code>TagManager</code>
    </PropertyNotSetInConstructor>
    <UndefinedInterfaceMethod occurrences="1">
      <code>initialize</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/DocBlockReflection.php">
    <DocblockTypeContradiction occurrences="1">
      <code>is_string($filter)</code>
    </DocblockTypeContradiction>
    <MixedArgument occurrences="4">
      <code>$tag['name']</code>
      <code>$tag['value']</code>
      <code>$this-&gt;docComment</code>
      <code>$this-&gt;docComment</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="2">
      <code>$tag['name']</code>
      <code>$tag['value']</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="9">
      <code>$returnTags[]</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$this-&gt;docComment</code>
      <code>$this-&gt;endLine</code>
      <code>$this-&gt;startLine</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>DocBlockTagInterface|false</code>
    </MixedInferredReturnType>
    <MixedMethodCall occurrences="3">
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
    </MixedMethodCall>
    <MixedOperand occurrences="1">
      <code>$tag</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$tag</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="3">
      <code>$returnTags</code>
      <code>$this-&gt;tags</code>
      <code>DocBlockTagInterface[]</code>
    </MixedReturnTypeCoercion>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$endLine</code>
      <code>$reflector</code>
      <code>$startLine</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>is_string($commentOrReflector)</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod occurrences="2">
      <code>getStartLine</code>
      <code>getStartLine</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/FileReflection.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </ArgumentTypeCoercion>
    <ImplicitToStringCast occurrences="1">
      <code>$function</code>
    </ImplicitToStringCast>
    <MixedArgument occurrences="1">
      <code>$value</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="3">
      <code>$token[0]</code>
      <code>$token[1]</code>
      <code>$token[2]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="6">
      <code>$lineNum</code>
      <code>$this-&gt;docComment</code>
      <code>$this-&gt;startLine</code>
      <code>$token</code>
      <code>$type</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$lineNum</code>
    </MixedOperand>
    <MixedPropertyTypeCoercion occurrences="4">
      <code>$scanner-&gt;getClassNames()</code>
      <code>$scanner-&gt;getIncludes()</code>
      <code>$scanner-&gt;getNamespaces()</code>
      <code>$scanner-&gt;getUses()</code>
    </MixedPropertyTypeCoercion>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>$scanner-&gt;getDocComment()</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor occurrences="2">
      <code>$contents</code>
      <code>$endLine</code>
    </PropertyNotSetInConstructor>
    <UnresolvableInclude occurrences="1">
      <code>include $fileRealPath</code>
    </UnresolvableInclude>
  </file>
  <file src="src/Reflection/FunctionReflection.php">
    <LessSpecificImplementedReturnType occurrences="1">
      <code>ParameterReflection[]</code>
    </LessSpecificImplementedReturnType>
    <MixedArgument occurrences="2">
      <code>$returnTypes</code>
      <code>$returnTypes</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="1">
      <code>$returnTypes[0]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="2">
      <code>$returnType</code>
      <code>$returnTypes</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$prototype['return']</code>
    </MixedOperand>
    <PossiblyFalseOperand occurrences="2">
      <code>strrpos($this-&gt;getName(), '\\')</code>
      <code>strrpos($this-&gt;getName(), '\\')</code>
    </PossiblyFalseOperand>
    <PossiblyFalseReference occurrences="2">
      <code>getDescription</code>
      <code>getTypes</code>
    </PossiblyFalseReference>
    <PossiblyInvalidOperand occurrences="6">
      <code>$endLine</code>
      <code>$endLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
    </PossiblyInvalidOperand>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>$docBlock</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod occurrences="2">
      <code>getDescription</code>
      <code>getTypes</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/MethodReflection.php">
    <ImplementedReturnTypeMismatch occurrences="1">
      <code>array|string</code>
    </ImplementedReturnTypeMismatch>
    <InvalidNullableReturnType occurrences="1">
      <code>bool</code>
    </InvalidNullableReturnType>
    <LessSpecificImplementedReturnType occurrences="1">
      <code>ParameterReflection[]</code>
    </LessSpecificImplementedReturnType>
    <MissingConstructor occurrences="1">
      <code>$annotations</code>
    </MissingConstructor>
    <MixedArgument occurrences="5">
      <code>$haystack[$i][0]</code>
      <code>$haystack[$i][0]</code>
      <code>$haystack[$i][0]</code>
      <code>$returnTypes</code>
      <code>$returnTypes</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="1">
      <code>$returnTypes[0]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="7">
      <code>$returnType</code>
      <code>$returnTypes</code>
      <code>$tokenType</code>
      <code>$tokenType</code>
      <code>$tokenType</code>
      <code>$tokenValue</code>
      <code>$tokenValue</code>
    </MixedAssignment>
    <MixedOperand occurrences="2">
      <code>$prototype['return']</code>
      <code>$tokenValue</code>
    </MixedOperand>
    <PossiblyFalseReference occurrences="2">
      <code>getStartLine</code>
      <code>getTypes</code>
    </PossiblyFalseReference>
    <PossiblyInvalidArgument occurrences="1">
      <code>$nameInformation</code>
    </PossiblyInvalidArgument>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>$this-&gt;annotations</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod occurrences="1">
      <code>getTypes</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/ParameterReflection.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$phpReflection-&gt;getName()</code>
    </ArgumentTypeCoercion>
    <MixedInferredReturnType occurrences="1">
      <code>string|null</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$params[$this-&gt;getPosition()]-&gt;getType()</code>
    </MixedReturnStatement>
    <PossiblyNullReference occurrences="1">
      <code>getName</code>
    </PossiblyNullReference>
    <UndefinedInterfaceMethod occurrences="1">
      <code>getType</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/PropertyReflection.php">
    <MissingConstructor occurrences="1">
      <code>$annotations</code>
    </MissingConstructor>
    <PossiblyFalseArgument occurrences="1">
      <code>$docComment</code>
    </PossiblyFalseArgument>
    <PossiblyInvalidArgument occurrences="1">
      <code>$nameInformation</code>
    </PossiblyInvalidArgument>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>null !== $this-&gt;annotations</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Scanner/AggregateDirectoryScanner.php">
    <MissingParamType occurrences="2">
      <code>$returnDerivedScannerClass</code>
      <code>$returnScannerClass</code>
    </MissingParamType>
    <MissingReturnType occurrences="3">
      <code>getFunctions</code>
      <code>getIncludes</code>
      <code>getNamespaces</code>
    </MissingReturnType>
    <MixedArgument occurrences="3">
      <code>$class</code>
      <code>$classScanner</code>
      <code>$returnDerivedScannerClass</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="2">
      <code>$info['name']</code>
      <code>$info['type']</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="4">
      <code>$class</code>
      <code>$classScanner</code>
      <code>$functions[]</code>
      <code>$info</code>
    </MixedAssignment>
    <MixedMethodCall occurrences="1">
      <code>getClass</code>
    </MixedMethodCall>
    <ParamNameMismatch occurrences="2">
      <code>$returnScannerClass</code>
      <code>$returnScannerClass</code>
    </ParamNameMismatch>
    <PossiblyInvalidMethodCall occurrences="3">
      <code>getClasses</code>
      <code>hasClass</code>
      <code>hasClass</code>
    </PossiblyInvalidMethodCall>
    <PropertyNotSetInConstructor occurrences="1">
      <code>AggregateDirectoryScanner</code>
    </PropertyNotSetInConstructor>
    <UndefinedThisPropertyFetch occurrences="1">
      <code>$this-&gt;infos</code>
    </UndefinedThisPropertyFetch>
  </file>
  <file src="src/Scanner/AnnotationScanner.php">
    <InvalidArgument occurrences="1">
      <code>$annotation</code>
    </InvalidArgument>
    <MissingClosureParamType occurrences="3">
      <code>$positionsForward</code>
      <code>$type</code>
      <code>$which</code>
    </MissingClosureParamType>
    <MissingClosureReturnType occurrences="9">
      <code>function ($positionsForward = 1) use (</code>
      <code>function ($type) use (&amp;$tokenIndex, &amp;$tokens) {</code>
      <code>function ($which) use (&amp;$context) {</code>
      <code>function () use (&amp;$currentChar, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$currentLine, &amp;$MACRO_STREAM_ADVANCE_CHAR) {</code>
      <code>function () use (&amp;$currentLine, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$currentWord, &amp;$MACRO_STREAM_ADVANCE_CHAR) {</code>
      <code>function () use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$tokenIndex, &amp;$tokens) {</code>
    </MissingClosureReturnType>
    <MissingReturnType occurrences="2">
      <code>scan</code>
      <code>setNameInformation</code>
    </MissingReturnType>
    <MixedArgument occurrences="10">
      <code>$currentLine</code>
      <code>$currentWord</code>
      <code>$currentWord</code>
      <code>$currentWord</code>
      <code>$stream</code>
      <code>$stream</code>
      <code>$streamIndex</code>
      <code>$streamIndex</code>
      <code>$token[1]</code>
      <code>$tokens</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="9">
      <code>$stream[$streamIndex]</code>
      <code>$token[0]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex - 1]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="5">
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="8">
      <code>$stream[$streamIndex]</code>
      <code>$stream[$streamIndex]</code>
      <code>$tokens[$tokenIndex - 1]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="8">
      <code>$currentChar</code>
      <code>$nextChar</code>
      <code>$positionsForward</code>
      <code>$streamIndex</code>
      <code>$streamIndex</code>
      <code>$token</code>
      <code>$tokenIndex</code>
      <code>$tokens[$tokenIndex][0]</code>
    </MixedAssignment>
    <MixedFunctionCall occurrences="10">
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentLine))</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentWord))</code>
    </MixedFunctionCall>
    <MixedInferredReturnType occurrences="1">
      <code>array</code>
    </MixedInferredReturnType>
    <MixedOperand occurrences="9">
      <code>$CONTEXT_DOCBLOCK</code>
      <code>$streamIndex</code>
      <code>$streamIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$tokens</code>
    </MixedReturnStatement>
    <NullArgument occurrences="1">
      <code>null</code>
    </NullArgument>
    <PossiblyNullOperand occurrences="1">
      <code>$annotation[1]</code>
    </PossiblyNullOperand>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>$nameInformation</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyNullReference occurrences="1">
      <code>resolveName</code>
    </PossiblyNullReference>
    <RedundantCondition occurrences="1"/>
  </file>
  <file src="src/Scanner/CachingFileScanner.php">
    <FalsableReturnStatement occurrences="1">
      <code>$this-&gt;fileScanner-&gt;getClass($className)</code>
    </FalsableReturnStatement>
    <ImplementedReturnTypeMismatch occurrences="2">
      <code>array</code>
      <code>array|null|string</code>
    </ImplementedReturnTypeMismatch>
    <InvalidFalsableReturnType occurrences="1">
      <code>ClassScanner</code>
    </InvalidFalsableReturnType>
    <InvalidNullableReturnType occurrences="1">
      <code>array</code>
    </InvalidNullableReturnType>
    <LessSpecificImplementedReturnType occurrences="1">
      <code>array</code>
    </LessSpecificImplementedReturnType>
    <MixedAssignment occurrences="1">
      <code>$this-&gt;fileScanner</code>
    </MixedAssignment>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;fileScanner-&gt;getIncludes()</code>
    </NullableReturnStatement>
    <PossiblyNullReference occurrences="12">
      <code>getAnnotationManager</code>
      <code>getClass</code>
      <code>getClassNameInformation</code>
      <code>getClassNames</code>
      <code>getClasses</code>
      <code>getDocComment</code>
      <code>getFile</code>
      <code>getFunctionNames</code>
      <code>getFunctions</code>
      <code>getIncludes</code>
      <code>getNamespaces</code>
      <code>getUses</code>
    </PossiblyNullReference>
    <PropertyNotSetInConstructor occurrences="3">
      <code>CachingFileScanner</code>
      <code>CachingFileScanner</code>
      <code>CachingFileScanner</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Scanner/ClassScanner.php">
    <FalsableReturnStatement occurrences="2">
      <code>$returnMethod</code>
      <code>false</code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType occurrences="2">
      <code>Annotation\AnnotationCollection</code>
      <code>MethodScanner</code>
    </InvalidFalsableReturnType>
    <InvalidReturnStatement occurrences="2">
      <code>$return</code>
      <code>$this-&gt;traits</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="2">
      <code>ClassScanner[]</code>
      <code>PropertyScanner[]</code>
    </InvalidReturnType>
    <InvalidScalarArgument occurrences="1">
      <code>$visibility</code>
    </InvalidScalarArgument>
    <InvalidToString occurrences="1">
      <code>__toString</code>
    </InvalidToString>
    <MissingClosureReturnType occurrences="2">
      <code>function () use (</code>
      <code>function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) {</code>
    </MissingClosureReturnType>
    <MissingReturnType occurrences="1">
      <code>export</code>
    </MissingReturnType>
    <MixedArgument occurrences="18">
      <code>$alias['alias']</code>
      <code>$alias['original']</code>
      <code>$alias['original']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['tokenEnd'] - $info['tokenStart'] + 1</code>
      <code>$info['tokenEnd'] - $info['tokenStart'] + 1</code>
      <code>$info['tokenEnd'] - $info['tokenStart'] + 1</code>
      <code>$info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$lastTokenArray[1] ?? ''</code>
      <code>$si</code>
      <code>$tokenContent</code>
      <code>$traitName</code>
      <code>$traitName</code>
      <code>$traitName</code>
      <code>$traitName</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$methodAlias</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess occurrences="69">
      <code>$alias['alias']</code>
      <code>$alias['alias']</code>
      <code>$alias['alias']</code>
      <code>$alias['original']</code>
      <code>$alias['original']</code>
      <code>$alias['visibility']</code>
      <code>$info['aliases']</code>
      <code>$info['aliases']</code>
      <code>$info['aliases']</code>
      <code>$info['aliases']</code>
      <code>$info['aliases']</code>
      <code>$info['aliases']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['tokenEnd']</code>
      <code>$info['tokenEnd']</code>
      <code>$info['tokenEnd']</code>
      <code>$info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['use_statements']</code>
      <code>$info['use_statements']</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$tokenContent</code>
      <code>$tokenLine</code>
      <code>$tokenType</code>
      <code>$tokens[$tokenIndex + 1]</code>
      <code>$tokens[$tokenIndex + 1]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="20">
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="30">
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$return[$alias['alias']]</code>
      <code>$tokens[$tokenIndex + 1]</code>
      <code>$tokens[$tokenIndex + 1]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="48">
      <code>$alias</code>
      <code>$alias</code>
      <code>$alias</code>
      <code>$classContext</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$infoIndex</code>
      <code>$infos[$infoIndex]['aliases'][$useStatementIndex]['alias']</code>
      <code>$infos[$infoIndex]['aliases'][$useStatementIndex]['visibility']</code>
      <code>$infos[$infoIndex]['lineEnd']</code>
      <code>$infos[$infoIndex]['name']</code>
      <code>$infos[$infoIndex]['name']</code>
      <code>$infos[$infoIndex]['tokenEnd']</code>
      <code>$infos[$infoIndex]['tokenEnd']</code>
      <code>$lastTokenArray</code>
      <code>$methodNameOrInfoIndex</code>
      <code>$return</code>
      <code>$return[]</code>
      <code>$return[]</code>
      <code>$return[]</code>
      <code>$si</code>
      <code>$this-&gt;docComment</code>
      <code>$this-&gt;lineEnd</code>
      <code>$this-&gt;lineStart</code>
      <code>$this-&gt;name</code>
      <code>$this-&gt;name</code>
      <code>$this-&gt;shortName</code>
      <code>$this-&gt;shortName</code>
      <code>$token</code>
      <code>$tokenIndex</code>
      <code>$trait</code>
      <code>$traitName</code>
      <code>$traitName</code>
      <code>[$tokenType, $tokenContent, $tokenLine]</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>string</code>
    </MixedInferredReturnType>
    <MixedOperand occurrences="17">
      <code>$infoIndex</code>
      <code>$info['tokenEnd']</code>
      <code>$info['tokenEnd']</code>
      <code>$info['tokenEnd']</code>
      <code>$infos[$infoIndex]['aliases'][$useStatementIndex]['original']</code>
      <code>$infos[$infoIndex]['use_statements'][$useStatementIndex]</code>
      <code>$this-&gt;shortInterfaces[$classInterfaceIndex]</code>
      <code>$this-&gt;shortInterfaces[$classInterfaceIndex]</code>
      <code>$this-&gt;shortName</code>
      <code>$this-&gt;shortName</code>
      <code>$tokenContent</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenLine</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$return</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="3">
      <code>$this-&gt;methods</code>
      <code>$this-&gt;traits</code>
      <code>MethodScanner[]</code>
    </MixedReturnTypeCoercion>
    <NullableReturnStatement occurrences="1">
      <code>$return</code>
    </NullableReturnStatement>
    <PossiblyNullArgument occurrences="1">
      <code>$docComment</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess occurrences="1">
      <code>$infos[$infoIndex]['aliases'][$useStatementIndex]['original']</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullOperand occurrences="1">
      <code>$trait-&gt;getName()</code>
    </PossiblyNullOperand>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>$nameInformation</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor occurrences="7">
      <code>$docComment</code>
      <code>$lineEnd</code>
      <code>$lineStart</code>
      <code>$name</code>
      <code>$parentClass</code>
      <code>$shortName</code>
      <code>$shortParentClass</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="2">
      <code>$tokenType === null &amp;&amp; $tokenContent === '{' &amp;&amp; $braceCount === 0</code>
      <code>false === $useAliasContext</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="11">
      <code>$this-&gt;nameInformation</code>
      <code>$this-&gt;nameInformation &amp;&amp; $this-&gt;nameInformation-&gt;hasNamespace()</code>
      <code>$this-&gt;nameInformation &amp;&amp; $this-&gt;nameInformation-&gt;hasNamespace()</code>
      <code>$this-&gt;nameInformation instanceof NameInformation</code>
      <code>$this-&gt;nameInformation instanceof NameInformation</code>
      <code>$this-&gt;nameInformation instanceof NameInformation</code>
      <code>$this-&gt;parentClass !== null</code>
      <code>is_object($this-&gt;getMethod($name))</code>
      <code>is_string($constantNameOrInfoIndex)</code>
      <code>is_string($propertyNameOrInfoIndex)</code>
      <code>null !== $visibility</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType occurrences="5">
      <code>$braceCount === 0</code>
      <code>$memberContext !== null</code>
      <code>$memberContext === 'method'</code>
      <code>$memberContext === 'method'</code>
      <code>$useAliasContext === true</code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/Scanner/ConstantScanner.php">
    <DocblockTypeContradiction occurrences="3">
      <code>$this-&gt;docComment === null</code>
      <code>$this-&gt;name === null</code>
      <code>null === $this-&gt;name</code>
    </DocblockTypeContradiction>
    <FalsableReturnStatement occurrences="1">
      <code>false</code>
    </FalsableReturnStatement>
    <InvalidArrayAccess occurrences="9">
      <code>$tokenContent</code>
      <code>$tokenLine</code>
      <code>$tokenNextContent</code>
      <code>$tokenNextContent</code>
      <code>$tokenNextLine</code>
      <code>$tokenNextLine</code>
      <code>$tokenNextType</code>
      <code>$tokenNextType</code>
      <code>$tokenType</code>
    </InvalidArrayAccess>
    <InvalidArrayOffset occurrences="3">
      <code>list($tokenNextType, $tokenNextContent, $tokenNextLine)</code>
      <code>list($tokenNextType, $tokenNextContent, $tokenNextLine)</code>
      <code>list($tokenType, $tokenContent, $tokenLine)</code>
    </InvalidArrayOffset>
    <InvalidFalsableReturnType occurrences="1">
      <code>AnnotationScanner</code>
    </InvalidFalsableReturnType>
    <MissingReturnType occurrences="3">
      <code>scan</code>
      <code>setClass</code>
      <code>setScannerClass</code>
    </MissingReturnType>
    <MixedArgument occurrences="6">
      <code>$string</code>
      <code>$string</code>
      <code>$string</code>
      <code>$string</code>
      <code>$tokenNextContent</code>
      <code>$tokenNextContent</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="9">
      <code>$tokenContent</code>
      <code>$tokenLine</code>
      <code>$tokenNextContent</code>
      <code>$tokenNextContent</code>
      <code>$tokenNextLine</code>
      <code>$tokenNextLine</code>
      <code>$tokenNextType</code>
      <code>$tokenNextType</code>
      <code>$tokenType</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="9">
      <code>$string</code>
      <code>$string</code>
      <code>$this-&gt;docComment</code>
      <code>$this-&gt;name</code>
      <code>$this-&gt;value</code>
      <code>$token</code>
      <code>list($tokenNextType, $tokenNextContent, $tokenNextLine)</code>
      <code>list($tokenNextType, $tokenNextContent, $tokenNextLine)</code>
      <code>list($tokenType, $tokenContent, $tokenLine)</code>
    </MixedAssignment>
    <PossiblyInvalidMethodCall occurrences="1">
      <code>getValue</code>
    </PossiblyInvalidMethodCall>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>$nameInformation</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor occurrences="6">
      <code>$class</code>
      <code>$docComment</code>
      <code>$lineStart</code>
      <code>$name</code>
      <code>$scannerClass</code>
      <code>$value</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Scanner/DerivedClassScanner.php">
    <InvalidScalarArgument occurrences="3">
      <code>$constantNameOrInfoIndex</code>
      <code>$methodNameOrInfoIndex</code>
      <code>$propertyNameOrInfoIndex</code>
    </InvalidScalarArgument>
    <LessSpecificImplementedReturnType occurrences="1">
      <code>array</code>
    </LessSpecificImplementedReturnType>
    <MixedArgument occurrences="9">
      <code>$iName</code>
      <code>$iName</code>
      <code>$pClassScanner-&gt;getConstantNames()</code>
      <code>$pClassScanner-&gt;getConstants($namesOnly)</code>
      <code>$pClassScanner-&gt;getInterfaces()</code>
      <code>$pClassScanner-&gt;getMethodNames()</code>
      <code>$pClassScanner-&gt;getMethods()</code>
      <code>$pClassScanner-&gt;getProperties($returnScannerProperty)</code>
      <code>$pClassScanner-&gt;getPropertyNames()</code>
    </MixedArgument>
    <MixedArrayOffset occurrences="1">
      <code>$this-&gt;interfaceClassScanners[$iName]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="14">
      <code>$iName</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
      <code>$pClassScanner</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="3">
      <code>MethodScanner</code>
      <code>bool|ConstantScanner</code>
      <code>bool|PropertyScanner</code>
    </MixedInferredReturnType>
    <MixedMethodCall occurrences="16">
      <code>getConstant</code>
      <code>getConstantNames</code>
      <code>getConstants</code>
      <code>getInterfaces</code>
      <code>getMethod</code>
      <code>getMethodNames</code>
      <code>getMethods</code>
      <code>getProperties</code>
      <code>getProperty</code>
      <code>getPropertyNames</code>
      <code>hasConstant</code>
      <code>hasConstant</code>
      <code>hasMethod</code>
      <code>hasMethod</code>
      <code>hasProperty</code>
      <code>hasProperty</code>
    </MixedMethodCall>
    <MixedReturnStatement occurrences="3">
      <code>$pClassScanner-&gt;getConstant($constantNameOrInfoIndex)</code>
      <code>$pClassScanner-&gt;getMethod($methodNameOrInfoIndex)</code>
      <code>$pClassScanner-&gt;getProperty($propertyNameOrInfoIndex)</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$methods</code>
      <code>MethodScanner[]</code>
    </MixedReturnTypeCoercion>
    <PossiblyNullArgument occurrences="5">
      <code>$currentParentClassName</code>
      <code>$currentParentClassName</code>
      <code>$this-&gt;classScanner-&gt;getName()</code>
      <code>$this-&gt;classScanner-&gt;getName()</code>
      <code>$this-&gt;classScanner-&gt;getName()</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;parentClassScanners</code>
    </PossiblyNullArrayOffset>
    <PropertyNotSetInConstructor occurrences="8">
      <code>DerivedClassScanner</code>
      <code>DerivedClassScanner</code>
      <code>DerivedClassScanner</code>
      <code>DerivedClassScanner</code>
      <code>DerivedClassScanner</code>
      <code>DerivedClassScanner</code>
      <code>DerivedClassScanner</code>
      <code>DerivedClassScanner</code>
    </PropertyNotSetInConstructor>
    <TooManyArguments occurrences="1">
      <code>getProperties</code>
    </TooManyArguments>
  </file>
  <file src="src/Scanner/DirectoryScanner.php">
    <DocblockTypeContradiction occurrences="4">
      <code>$this-&gt;classToFileScanner === null</code>
      <code>$this-&gt;classToFileScanner === null</code>
      <code>$this-&gt;classToFileScanner === null</code>
      <code>$this-&gt;classToFileScanner === null</code>
    </DocblockTypeContradiction>
    <FalsableReturnStatement occurrences="1">
      <code>$returnClass</code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType occurrences="1">
      <code>ClassScanner|DerivedClassScanner</code>
    </InvalidFalsableReturnType>
    <InvalidToString occurrences="1">
      <code>__toString</code>
    </InvalidToString>
    <MissingReturnType occurrences="2">
      <code>export</code>
      <code>getNamespaces</code>
    </MissingReturnType>
    <MixedArgument occurrences="3">
      <code>$d</code>
      <code>$item-&gt;getRealPath()</code>
      <code>$item-&gt;getRealPath()</code>
    </MixedArgument>
    <MixedArrayOffset occurrences="3">
      <code>$this-&gt;classToFileScanner[$fsClassName]</code>
      <code>$this-&gt;fileScanners[$fsIndex]</code>
      <code>$this-&gt;fileScanners[$this-&gt;classToFileScanner[$class]]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="4">
      <code>$d</code>
      <code>$fsClassName</code>
      <code>$fsIndex</code>
      <code>$item</code>
    </MixedAssignment>
    <MixedMethodCall occurrences="3">
      <code>getRealPath</code>
      <code>getRealPath</code>
      <code>isFile</code>
    </MixedMethodCall>
    <PossiblyFalseArgument occurrences="1">
      <code>$classScanner</code>
    </PossiblyFalseArgument>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$classToFileScanner</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType occurrences="3">
      <code>$this-&gt;classToFileScanner !== null</code>
      <code>is_array($directory)</code>
      <code>is_string($directory)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Scanner/DocBlockScanner.php">
    <MissingClosureParamType occurrences="3">
      <code>$length</code>
      <code>$positionsForward</code>
      <code>$type</code>
    </MissingClosureParamType>
    <MissingClosureReturnType occurrences="9">
      <code>function ($length) use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function ($positionsForward = 1) use (</code>
      <code>function ($type) use (&amp;$tokenIndex, &amp;$tokens) {</code>
      <code>function () use (&amp;$currentChar, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$currentLine, &amp;$MACRO_STREAM_ADVANCE_CHAR) {</code>
      <code>function () use (&amp;$currentLine, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$currentWord, &amp;$MACRO_STREAM_ADVANCE_CHAR) {</code>
      <code>function () use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$tokenIndex, &amp;$tokens) {</code>
    </MissingClosureReturnType>
    <MixedArgument occurrences="9">
      <code>$currentLine</code>
      <code>$currentWord</code>
      <code>$currentWord</code>
      <code>$length</code>
      <code>$stream</code>
      <code>$stream</code>
      <code>$streamIndex</code>
      <code>$streamIndex</code>
      <code>$tokens</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="15">
      <code>$stream[$streamIndex]</code>
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$token[0]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="7">
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="9">
      <code>$stream[$streamIndex]</code>
      <code>$stream[$streamIndex]</code>
      <code>$this-&gt;tags[$tagIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="6">
      <code>$currentChar</code>
      <code>$positionsForward</code>
      <code>$streamIndex</code>
      <code>$token</code>
      <code>$tokenIndex</code>
      <code>$tokens[$tokenIndex][0]</code>
    </MixedAssignment>
    <MixedFunctionCall occurrences="5">
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentLine))</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentWord))</code>
    </MixedFunctionCall>
    <MixedInferredReturnType occurrences="1">
      <code>array</code>
    </MixedInferredReturnType>
    <MixedOperand occurrences="19">
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$streamIndex</code>
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$tokenIndex</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>~$CONTEXT_INSIDE_ASTERISK</code>
      <code>~$CONTEXT_INSIDE_DOCBLOCK</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$tokens</code>
    </MixedReturnStatement>
    <NullArgument occurrences="1">
      <code>null</code>
    </NullArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>$nameInformation</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor occurrences="2">
      <code>$annotationManager</code>
      <code>$shortDescription</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="2">
      <code>$context === 0x00 &amp;&amp; $currentChar === '/'</code>
      <code>$this-&gt;shortDescription != '' &amp;&amp; $tagIndex === null</code>
    </RedundantCondition>
    <TypeDoesNotContainType occurrences="1">
      <code>$tagIndex !== null</code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/Scanner/FileScanner.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>FileScanner</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Scanner/MethodScanner.php">
    <DocblockTypeContradiction occurrences="2">
      <code>$this-&gt;docComment === null</code>
      <code>$this-&gt;name === null</code>
    </DocblockTypeContradiction>
    <MissingClosureReturnType occurrences="3">
      <code>function () use (</code>
      <code>function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) {</code>
      <code>function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) {</code>
    </MissingClosureReturnType>
    <MissingReturnType occurrences="2">
      <code>export</code>
      <code>scan</code>
    </MissingReturnType>
    <MixedArgument occurrences="5">
      <code>$info['name']</code>
      <code>$info['tokenEnd'] - $info['tokenStart']</code>
      <code>$info['tokenStart']</code>
      <code>$lastTokenArray[1] ?? ''</code>
      <code>$tokenContent</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="12">
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$tokenContent</code>
      <code>$tokenLine</code>
      <code>$tokenType</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="4">
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="9">
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="15">
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$infoIndex</code>
      <code>$infos[$infoIndex]['lineEnd']</code>
      <code>$infos[$infoIndex]['tokenEnd']</code>
      <code>$lastTokenArray</code>
      <code>$return[]</code>
      <code>$this-&gt;docComment</code>
      <code>$this-&gt;lineEnd</code>
      <code>$this-&gt;lineStart</code>
      <code>$this-&gt;name</code>
      <code>$token</code>
      <code>$tokenIndex</code>
      <code>[$tokenType, $tokenContent, $tokenLine]</code>
    </MixedAssignment>
    <MixedOperand occurrences="5">
      <code>$infoIndex</code>
      <code>$infoIndex</code>
      <code>$tokenContent</code>
      <code>$tokenIndex</code>
      <code>$tokenLine</code>
    </MixedOperand>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>$nameInformation</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedVariable occurrences="2">
      <code>$info</code>
      <code>$info</code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor occurrences="6">
      <code>$class</code>
      <code>$docComment</code>
      <code>$lineEnd</code>
      <code>$lineStart</code>
      <code>$name</code>
      <code>$scannerClass</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="1">
      <code>$tokenType === T_STRING &amp;&amp; $parentCount === 0</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>is_string($parameterNameOrInfoIndex)</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType occurrences="2">
      <code>$parentCount === 1</code>
      <code>$parentCount === 1</code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/Scanner/ParameterScanner.php">
    <InvalidNullableReturnType occurrences="8">
      <code>ClassScanner</code>
      <code>MethodScanner</code>
      <code>int</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
    </InvalidNullableReturnType>
    <MixedArgument occurrences="2">
      <code>$token[1]</code>
      <code>is_string($token) ? $token : $token[1]</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="5">
      <code>$token[0]</code>
      <code>$token[0]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="1">
      <code>$token</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$token[1]</code>
    </MixedOperand>
    <NullableReturnStatement occurrences="8">
      <code>$this-&gt;class</code>
      <code>$this-&gt;declaringClass</code>
      <code>$this-&gt;declaringFunction</code>
      <code>$this-&gt;declaringScannerClass</code>
      <code>$this-&gt;declaringScannerFunction</code>
      <code>$this-&gt;defaultValue</code>
      <code>$this-&gt;name</code>
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArgument occurrences="3">
      <code>$this-&gt;tokens</code>
      <code>$tokens</code>
      <code>$tokens</code>
    </PossiblyNullArgument>
    <PossiblyNullOperand occurrences="1">
      <code>$this-&gt;defaultValue</code>
    </PossiblyNullOperand>
  </file>
  <file src="src/Scanner/PropertyScanner.php">
    <DocblockTypeContradiction occurrences="2">
      <code>$this-&gt;docComment === null &amp;&amp; $this-&gt;name === null</code>
      <code>$this-&gt;name === null</code>
    </DocblockTypeContradiction>
    <MissingReturnType occurrences="3">
      <code>scan</code>
      <code>setClass</code>
      <code>setScannerClass</code>
    </MissingReturnType>
    <MixedArgument occurrences="4">
      <code>$token</code>
      <code>$token</code>
      <code>$tokenContent</code>
      <code>$tokenContent</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="3">
      <code>$tokenContent</code>
      <code>$tokenLine</code>
      <code>$tokenType</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="4">
      <code>$tempValue</code>
      <code>$this-&gt;docComment</code>
      <code>$token</code>
      <code>list($tokenType, $tokenContent, $tokenLine)</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$tempValue</code>
    </MixedOperand>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>$nameInformation</code>
      <code>empty($value) ? null : $value</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor occurrences="7">
      <code>$class</code>
      <code>$docComment</code>
      <code>$lineStart</code>
      <code>$name</code>
      <code>$scannerClass</code>
      <code>$value</code>
      <code>$valueType</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Scanner/TokenArrayScanner.php">
    <DocblockTypeContradiction occurrences="2">
      <code>$namespace === null</code>
      <code>is_string($namespace)</code>
    </DocblockTypeContradiction>
    <InvalidReturnStatement occurrences="1">
      <code>$return</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>ClassScanner[]</code>
    </InvalidReturnType>
    <InvalidToString occurrences="1">
      <code>__toString</code>
    </InvalidToString>
    <MissingClosureReturnType occurrences="5">
      <code>function () use (</code>
      <code>function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) {</code>
      <code>function () use (&amp;$tokenIndex, &amp;$docCommentIndex) {</code>
      <code>function () use (&amp;$tokenIndex, &amp;$docCommentIndex) {</code>
      <code>function () use (&amp;$tokenType, &amp;$docCommentIndex) {</code>
    </MissingClosureReturnType>
    <MissingReturnType occurrences="2">
      <code>export</code>
      <code>scan</code>
    </MissingReturnType>
    <MixedArgument occurrences="7">
      <code>$info['name']</code>
      <code>$info['namespace']</code>
      <code>$info['tokenEnd'] - $info['tokenStart'] + 1</code>
      <code>$info['tokenStart']</code>
      <code>$info['uses']</code>
      <code>$namespace</code>
      <code>$validTrailingTokens</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="40">
      <code>$includeTypes[$tokens[$tokenIndex][0]]</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['name']</code>
      <code>$info['namespace']</code>
      <code>$info['namespace']</code>
      <code>$info['namespace']</code>
      <code>$info['namespace']</code>
      <code>$info['namespace']</code>
      <code>$info['statements']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['type']</code>
      <code>$info['uses']</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$token[0]</code>
      <code>$token[1]</code>
      <code>$token[2]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="13">
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="26">
      <code>$includeTypes[$tokens[$tokenIndex][0]]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$infos[$infoIndex]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex + 2]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="32">
      <code>$docCommentIndex</code>
      <code>$functionNames[]</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$info</code>
      <code>$infoIndex</code>
      <code>$infos[$infoIndex]['lineEnd']</code>
      <code>$infos[$infoIndex]['shortName']</code>
      <code>$infos[$infoIndex]['statements'][$useStatementIndex]['as']</code>
      <code>$infos[$infoIndex]['tokenEnd']</code>
      <code>$namespace</code>
      <code>$namespace</code>
      <code>$namespaces[]</code>
      <code>$namespaces[]</code>
      <code>$return[]</code>
      <code>$statement</code>
      <code>$this-&gt;docComment</code>
      <code>$token</code>
      <code>$token</code>
      <code>$tokenContent</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$type</code>
      <code>$uses[]</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="2">
      <code>ClassScanner|false</code>
      <code>string|null</code>
    </MixedInferredReturnType>
    <MixedOperand occurrences="11">
      <code>$infoIndex</code>
      <code>$infos[$infoIndex]['shortName']</code>
      <code>$infos[$infoIndex]['statements'][$useStatementIndex]['use']</code>
      <code>$namespace</code>
      <code>$tokenContent</code>
      <code>$tokenContent</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
      <code>$tokenIndex</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$this-&gt;docComment</code>
    </MixedReturnStatement>
    <PossiblyNullArgument occurrences="2">
      <code>$namespace</code>
      <code>$namespace</code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>$annotationManager</code>
      <code>$tokens</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedVariable occurrences="2">
      <code>$info</code>
      <code>$info</code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$nameInformation</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>is_string($name)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Scanner/Util.php">
    <MixedArgument occurrences="1">
      <code>$data-&gt;uses</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="1">
      <code>$data-&gt;uses[$firstPart]</code>
    </MixedArrayAccess>
    <MixedOperand occurrences="2">
      <code>$data-&gt;namespace</code>
      <code>$data-&gt;namespace</code>
    </MixedOperand>
  </file>
  <file src="test/Annotation/AnnotationManagerTest.php">
    <MissingReturnType occurrences="1">
      <code>testAllowsMultipleParsingStrategies</code>
    </MissingReturnType>
    <MixedArgument occurrences="3">
      <code>$annotation</code>
      <code>$annotation</code>
      <code>$this-&gt;manager</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$annotation</code>
    </MixedAssignment>
    <MixedMethodCall occurrences="2">
      <code>attach</code>
      <code>attach</code>
    </MixedMethodCall>
    <PossiblyFalseReference occurrences="1">
      <code>hasAnnotation</code>
    </PossiblyFalseReference>
    <UndefinedThisPropertyAssignment occurrences="1">
      <code>$this-&gt;manager</code>
    </UndefinedThisPropertyAssignment>
    <UndefinedThisPropertyFetch occurrences="1">
      <code>$this-&gt;manager</code>
    </UndefinedThisPropertyFetch>
  </file>
  <file src="test/Annotation/DoctrineAnnotationParserTest.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>__NAMESPACE__ . '\TestAsset\DoctrineAnnotation'</code>
      <code>__NAMESPACE__ . '\TestAsset\DoctrineAnnotation'</code>
    </ArgumentTypeCoercion>
    <InvalidArgument occurrences="1">
      <code>'some string'</code>
    </InvalidArgument>
    <MissingReturnType occurrences="8">
      <code>getEvent</code>
      <code>testParserCreatesNewAnnotationInstances</code>
      <code>testRegisterAnnotations</code>
      <code>testRegisterAnnotationsThrowsException</code>
      <code>testReturnsFalseClassNotSet</code>
      <code>testReturnsFalseDuringCreationIfAnnotationIsNotRegistered</code>
      <code>testReturnsFalseEmptyAnnotations</code>
      <code>testReturnsFalseRawNotSet</code>
    </MissingReturnType>
    <MixedArgument occurrences="5">
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
    </MixedArgument>
    <MixedAssignment occurrences="5">
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
    </MixedAssignment>
    <MixedMethodCall occurrences="2">
      <code>setParam</code>
      <code>setParam</code>
    </MixedMethodCall>
    <PossiblyInvalidPropertyFetch occurrences="2">
      <code>$test-&gt;value</code>
      <code>$test-&gt;value</code>
    </PossiblyInvalidPropertyFetch>
  </file>
  <file src="test/Annotation/GenericAnnotationParserTest.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>__NAMESPACE__ . '\TestAsset\Bar'</code>
      <code>__NAMESPACE__ . '\TestAsset\Foo'</code>
      <code>__NAMESPACE__ . '\TestAsset\Foo'</code>
    </ArgumentTypeCoercion>
    <InvalidArgument occurrences="2">
      <code>'some string'</code>
      <code>new \stdClass()</code>
    </InvalidArgument>
    <MissingReturnType occurrences="11">
      <code>getFooEvent</code>
      <code>testAllowRegistrationOnceOnly</code>
      <code>testAllowsSpecifyingAliases</code>
      <code>testParserAllowsPassingArrayOfAnnotationInstances</code>
      <code>testParserCreatesNewAnnotationInstances</code>
      <code>testParserKeepsTrackOfAllowedAnnotations</code>
      <code>testRegisterAnnotationAllowsAnnotationInterfaceOnly</code>
      <code>testRegisterAnnotations</code>
      <code>testRegisterAnnotationsThrowsException</code>
      <code>testReturnsFalseDuringCreationIfAnnotationIsNotRegistered</code>
      <code>testSetAliasNotRegisteredClassThrowsException</code>
    </MissingReturnType>
    <MixedArgument occurrences="4">
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
    </MixedArgument>
    <MixedAssignment occurrences="4">
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
      <code>$event</code>
    </MixedAssignment>
    <NoInterfaceProperties occurrences="2">
      <code>$test-&gt;content</code>
      <code>$test-&gt;content</code>
    </NoInterfaceProperties>
  </file>
  <file src="test/Generator/AbstractGeneratorTest.php">
    <MissingReturnType occurrences="2">
      <code>testConstructor</code>
      <code>testSetOptionsThrowsExceptionOnInvalidArgument</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/AbstractMemberGeneratorTest.php">
    <InvalidArgument occurrences="1">
      <code>new \stdClass()</code>
    </InvalidArgument>
    <MissingReturnType occurrences="2">
      <code>testSetDocBlockThrowsExceptionWithInvalidType</code>
      <code>testSetFlagsWithArray</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/ClassGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>'InvalidArgumentException'</code>
      <code>'LaminasTest_Code_NsTest_BarClass'</code>
    </ArgumentTypeCoercion>
    <InvalidArgument occurrences="5">
      <code>$resource</code>
      <code>ExceptionInterface::class</code>
      <code>[]</code>
      <code>new ClassGenerator()</code>
      <code>new \stdClass()</code>
    </InvalidArgument>
    <InvalidScalarArgument occurrences="5">
      <code>'public'</code>
      <code>'public'</code>
      <code>true</code>
      <code>true</code>
      <code>true</code>
    </InvalidScalarArgument>
    <MissingReturnType occurrences="91">
      <code>testAbstractAccessors</code>
      <code>testAddConstantAcceptsMixedScalars</code>
      <code>testAddConstantRejectsArrayWithInvalidNestedValue</code>
      <code>testAddConstantRejectsObjectConstantValue</code>
      <code>testAddConstantRejectsResourceConstantValue</code>
      <code>testAddConstantThrowsExceptionOnDuplicate</code>
      <code>testAddConstantThrowsExceptionWithEmptyConstantName</code>
      <code>testAddConstantThrowsExceptionWithInvalidName</code>
      <code>testAddOneUseTwiceOnlyAddsOne</code>
      <code>testAddOneUseWithAliasTwiceOnlyAddsOne</code>
      <code>testAddPropertiesIsBackwardsCompatibleWithConstants</code>
      <code>testAddPropertyIsBackwardsCompatibleWithConstants</code>
      <code>testAddTraitAliasExceptionInvalidAliasArgument</code>
      <code>testAddTraitAliasExceptionInvalidMethodFormat</code>
      <code>testAddTraitAliasExceptionInvalidMethodTraitDoesNotExist</code>
      <code>testAddTraitAliasExceptionInvalidVisibilityValue</code>
      <code>testAddTraitAliasExceptionMethodAlreadyExists</code>
      <code>testAddTraitOverrideExceptionInvalidMethodArgInArray</code>
      <code>testAddTraitOverrideExceptionInvalidMethodFormat</code>
      <code>testAddTraitOverrideExceptionInvalidMethodTraitDoesNotExist</code>
      <code>testAddTraitOverrideExceptionInvalidTraitName</code>
      <code>testAddTraitOverrideExceptionInvalidTraitToReplaceArgument</code>
      <code>testAddUses</code>
      <code>testCanAddConstant</code>
      <code>testCanAddConstantsWithArrayOfGenerators</code>
      <code>testCanAddConstantsWithArrayOfKeyValues</code>
      <code>testCanAddMultipleTraitOverrides</code>
      <code>testCanAddTraitAliasWithArray</code>
      <code>testCanAddTraitAliasWithString</code>
      <code>testCanAddTraitOverride</code>
      <code>testCanAddTraitWithArray</code>
      <code>testCanAddTraitWithString</code>
      <code>testCanGetTraitsMethod</code>
      <code>testCanRemoveAllTraitOverrides</code>
      <code>testCanRemoveTrait</code>
      <code>testCanRemoveTraitOverride</code>
      <code>testClassCanBeGeneratedWithConstantAndPropertyWithSameName</code>
      <code>testClassDocBlockAccessors</code>
      <code>testClassFromReflectionDiscardParentImplementedInterfaces</code>
      <code>testClassFromReflectionThatImplementsInterfaces</code>
      <code>testCodeGenerationShouldTakeIntoAccountNamespacesFromReflection</code>
      <code>testConstantsAddedFromReflection</code>
      <code>testConstruction</code>
      <code>testCorrectExtendNames</code>
      <code>testCorrectExtendNamesFromGlobalNamespace</code>
      <code>testCorrectImplementNames</code>
      <code>testCorrectlyExtendsAliasOfProvidedFQCNIfUseAliasExists</code>
      <code>testCorrectlyExtendsFullyQualifiedParentClass</code>
      <code>testCorrectlyExtendsProvidedAliasIfUseAliasExists</code>
      <code>testCorrectlyExtendsProvidedNamespaceAliasIfUseAliasExistsForNamespace</code>
      <code>testCorrectlyExtendsRelativeParentClass</code>
      <code>testCorrectlyExtendsWithNamespaceAliasOfProvidedFQCNIfUseAliasExistsForNamespace</code>
      <code>testCreateFromArrayWithDocBlockFromArray</code>
      <code>testCreateFromArrayWithDocBlockInstance</code>
      <code>testExtendedClassAccessors</code>
      <code>testExtendedClassProperies</code>
      <code>testGenerateClassAndAddMethod</code>
      <code>testGenerateWithFinalFlag</code>
      <code>testHasExtendedClass</code>
      <code>testHasImplementedInterface</code>
      <code>testHasMethod</code>
      <code>testHasMethodInsensitive</code>
      <code>testHasProperty</code>
      <code>testHasUse</code>
      <code>testHasUseAlias</code>
      <code>testHereDoc</code>
      <code>testImplementedInterfacesAccessors</code>
      <code>testMethodAccessors</code>
      <code>testNameAccessors</code>
      <code>testNonNamespaceClassReturnsAllMethods</code>
      <code>testPassingANamespacedClassnameShouldGenerateAClassnameWithoutItsNamespace</code>
      <code>testPassingANamespacedClassnameShouldGenerateANamespaceDeclaration</code>
      <code>testPropertyAccessors</code>
      <code>testRemoveConstant</code>
      <code>testRemoveExtendedClass</code>
      <code>testRemoveImplementedInterface</code>
      <code>testRemoveMethod</code>
      <code>testRemoveMethodInsensitive</code>
      <code>testRemoveProperty</code>
      <code>testRemoveUse</code>
      <code>testRemoveUseAlias</code>
      <code>testSetMethodNameAlreadyExistsThrowsException</code>
      <code>testSetMethodNoMethodOrArrayThrowsException</code>
      <code>testSetNameShouldDetermineIfNamespaceSegmentIsPresent</code>
      <code>testSetPropertyAlreadyExistsThrowsException</code>
      <code>testSetPropertyNoArrayOrPropertyThrowsException</code>
      <code>testSetextendedclassShouldIgnoreEmptyClassnameOnGenerate</code>
      <code>testSetextendedclassShouldNotIgnoreNonEmptyClassnameOnGenerate</code>
      <code>testToString</code>
      <code>testTraitGenerationWithAliasesAndOverrides</code>
      <code>testUseTraitGeneration</code>
    </MissingReturnType>
    <MixedArgument occurrences="27">
      <code>$classGenerator-&gt;generate()</code>
      <code>$classGenerator-&gt;generate()</code>
      <code>$classGenerator-&gt;generate()</code>
      <code>$classGenerator-&gt;generate()</code>
      <code>$classGenerator-&gt;generate()</code>
      <code>$classGenerator-&gt;generate()</code>
      <code>$code</code>
      <code>$code</code>
      <code>$code</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$output</code>
      <code>$output</code>
      <code>$overrides['myTrait::foo']</code>
      <code>$overrides['myTrait::foo']</code>
      <code>$overrides['myTrait::foo']</code>
      <code>$overrides['myTrait::foo']</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="7">
      <code>$aliases['myTrait::method']['alias']</code>
      <code>$aliases['myTrait::method']['alias']</code>
      <code>$aliases['myTrait::method']['visibility']</code>
      <code>$aliases['myTrait::method']['visibility']</code>
      <code>$overrides['myTrait::foo'][0]</code>
      <code>$overrides['myTrait::foo'][1]</code>
      <code>$overrides['myTrait::foo'][1]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="16">
      <code>$code</code>
      <code>$code</code>
      <code>$code</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$output</code>
      <code>$output</code>
      <code>$output</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
    </MixedAssignment>
    <PossiblyFalseReference occurrences="15">
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
    </PossiblyFalseReference>
    <RedundantCondition occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="2">
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/AuthorTagTest.php">
    <MissingReturnType occurrences="5">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/GenericTagTest.php">
    <MissingReturnType occurrences="4">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/LicenseTagTest.php">
    <MissingReturnType occurrences="5">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testLicenseProducesCorrectDocBlockLine</code>
      <code>testNameIsCorrect</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/MethodTagTest.php">
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForMethodNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/ParamTagTest.php">
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForVariableNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/PropertyTagTest.php">
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForVariableNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/ReturnTagTest.php">
    <MissingReturnType occurrences="3">
      <code>testCreatingTagFromReflection</code>
      <code>testNameIsCorrect</code>
      <code>testReturnProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/ThrowsTagTest.php">
    <MissingReturnType occurrences="3">
      <code>testCreatingTagFromReflection</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlock/Tag/TypableTagTest.php">
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForTypesAsStringWithMultipleTypes</code>
      <code>testGetterForTypesAsStringWithMultipleTypesAndDelimiter</code>
      <code>testGetterForTypesAsStringWithSingleType</code>
      <code>testGetterForTypesAsStringWithSingleTypeAndDelimiter</code>
    </MissingReturnType>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/VarTagTest.php">
    <InternalMethod occurrences="2">
      <code>setVariableName</code>
      <code>setVariableName</code>
    </InternalMethod>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/DocBlockGeneratorTest.php">
    <DeprecatedMethod occurrences="2">
      <code>setDatatype</code>
      <code>setDatatype</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="15">
      <code>testCanPassTagsToConstructor</code>
      <code>testCreateFromArray</code>
      <code>testDocBlockFromReflectionAuthorTag</code>
      <code>testDocBlockFromReflectionLicenseTag</code>
      <code>testDocBlockFromReflectionLongDescription</code>
      <code>testDocBlockFromReflectionParamTag</code>
      <code>testDocBlockFromReflectionReturnTag</code>
      <code>testDocBlockFromReflectionShortDescription</code>
      <code>testDocBlockFromReflectionTagsCount</code>
      <code>testGenerateWithWordWrapDisabled</code>
      <code>testGenerateWordWrapIsEnabledByDefault</code>
      <code>testGenerationOfDocBlock</code>
      <code>testLongDescriptionGetterAndSetter</code>
      <code>testShortDescriptionGetterAndSetter</code>
      <code>testTagGettersAndSetters</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/FileGeneratorTest.php">
    <MissingReturnType occurrences="21">
      <code>testCanAppendToBodyOfReflectedFile</code>
      <code>testConstruction</code>
      <code>testCreateFromArrayWithClassFromArray</code>
      <code>testCreateFromArrayWithClassInstance</code>
      <code>testFileLineEndingsAreAlwaysLineFeed</code>
      <code>testFromFileReflection</code>
      <code>testFromReflection</code>
      <code>testGeneratedClassesHaveUses</code>
      <code>testGeneratesNamespaceStatements</code>
      <code>testGeneratesUseStatements</code>
      <code>testGeneratingFromAReflectedFileName</code>
      <code>testIndentationGetterAndSetter</code>
      <code>testIssue4747FileGenerationWithAddedMethodIsCorrectlyFormatted</code>
      <code>testSetUseAllowsMultipleAliasedUseStatements</code>
      <code>testSetUseDoesntGenerateMultipleIdenticalUseStatements</code>
      <code>testSetUsesDoesntGenerateMultipleIdenticalUseStatements</code>
      <code>testSetUsesWithArrays</code>
      <code>testSetUsesWithGetUses</code>
      <code>testSetUsesWithString</code>
      <code>testSourceContentGetterAndSetter</code>
      <code>testToString</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>$fileGenerator-&gt;getClasses()</code>
    </MixedArgument>
    <MixedAssignment occurrences="2">
      <code>$codeGenFileFromDisk</code>
      <code>$fileGenerator</code>
    </MixedAssignment>
    <RedundantConditionGivenDocblockType occurrences="3">
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
    <UnresolvableInclude occurrences="2">
      <code>require_once $file</code>
      <code>require_once $tempFile</code>
    </UnresolvableInclude>
  </file>
  <file src="test/Generator/InterfaceGeneratorTest.php">
    <MissingReturnType occurrences="17">
      <code>testAbstractAccessorsReturnsFalse</code>
      <code>testClassNotAnInterfaceException</code>
      <code>testCodeGenerationShouldTakeIntoAccountNamespacesFromReflection</code>
      <code>testCreateFromArrayWithDocBlockFromArray</code>
      <code>testCreateFromArrayWithDocBlockInstance</code>
      <code>testExtendedClassAccessors</code>
      <code>testGenerateClassAndAddMethod</code>
      <code>testGenerateImplementsInterface</code>
      <code>testImplementedInterfacesAccessors</code>
      <code>testMethodAccessors</code>
      <code>testPassingANamespacedClassnameShouldGenerateAClassnameWithoutItsNamespace</code>
      <code>testPassingANamespacedClassnameShouldGenerateANamespaceDeclaration</code>
      <code>testPropertyAccessors</code>
      <code>testSetNameShouldDetermineIfNamespaceSegmentIsPresent</code>
      <code>testSetextendedclassShouldIgnoreEmptyClassnameOnGenerate</code>
      <code>testSetextendedclassShouldNotIgnoreNonEmptyClassnameOnGenerate</code>
      <code>testToString</code>
    </MissingReturnType>
    <MixedArgument occurrences="6">
      <code>$output</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
    </MixedArgument>
    <MixedAssignment occurrences="7">
      <code>$output</code>
      <code>$output</code>
      <code>$output</code>
      <code>$output</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
    </MixedAssignment>
    <PossiblyFalseReference occurrences="2">
      <code>isInterface</code>
      <code>isInterface</code>
    </PossiblyFalseReference>
    <RedundantConditionGivenDocblockType occurrences="2">
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/MethodGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$className</code>
    </ArgumentTypeCoercion>
    <InvalidArgument occurrences="1">
      <code>new stdClass()</code>
    </InvalidArgument>
    <MissingDocblockType occurrences="2">
      <code>$baz</code>
      <code>$foo</code>
    </MissingDocblockType>
    <MissingReturnType occurrences="21">
      <code>returnTypeHintClasses</code>
      <code>testByRefReturnType</code>
      <code>testCopyMethodSignature</code>
      <code>testCreateFromArray</code>
      <code>testCreateInterfaceMethodFromArray</code>
      <code>testDefaultValueGenerationDoesNotIncludeTrailingSemicolon</code>
      <code>testDocBlockGetterAndSetter</code>
      <code>testFrom</code>
      <code>testFromByReferenceMethodReflection</code>
      <code>testMethodBodyGetterAndSetter</code>
      <code>testMethodCanHaveDocBlock</code>
      <code>testMethodConstructor</code>
      <code>testMethodFromReflection</code>
      <code>testMethodFromReflectionMultiLinesIndention</code>
      <code>testMethodParameterAccessors</code>
      <code>testMethodParameterMutator</code>
      <code>testMethodWithFinalModifierIsEmitted</code>
      <code>testMethodWithFinalModifierIsNotEmittedWhenMethodIsAbstract</code>
      <code>testMethodWithStaticModifierIsEmitted</code>
      <code>testSetReturnType</code>
      <code>testSetReturnTypeWithNull</code>
    </MissingReturnType>
    <PossiblyNullReference occurrences="1">
      <code>generate</code>
    </PossiblyNullReference>
    <RedundantCondition occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantCondition>
  </file>
  <file src="test/Generator/ParameterGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>'LaminasTest_Code_NsTest_BarClass'</code>
      <code>'Namespaced\TypeHint\Bar'</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="1">
      <code>self::assertAttributeEquals(true, 'omitDefaultValue', $parameterGenerator)</code>
    </DeprecatedMethod>
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1">
      <code>string[][]</code>
    </InvalidReturnType>
    <MissingReturnType occurrences="27">
      <code>dataFromReflectionGenerate</code>
      <code>testCallableTypeHint</code>
      <code>testCreateFromArray</code>
      <code>testDefaultValueGetterAndSetterPersistValue</code>
      <code>testFromReflectionGenerate</code>
      <code>testFromReflectionGetArrayHint</code>
      <code>testFromReflectionGetDefaultValue</code>
      <code>testFromReflectionGetDefaultValueNotOptional</code>
      <code>testFromReflectionGetParameterName</code>
      <code>testFromReflectionGetParameterType</code>
      <code>testFromReflectionGetReference</code>
      <code>testFromReflectionGetWithNativeType</code>
      <code>testGenerateIsCorrect</code>
      <code>testGeneratedParametersHaveEscapedDefaultValues</code>
      <code>testGeneratesSimpleHints</code>
      <code>testGetInternalClassDefaultParameterValue</code>
      <code>testNameGetterAndSetterPersistValue</code>
      <code>testOmitType</code>
      <code>testParameterGeneratorReturnsCorrectTypeForNonNamespaceClasses</code>
      <code>testPositionGetterAndSetterPersistValue</code>
      <code>testSetGetVariadic</code>
      <code>testTypeGetterAndSetterPersistValue</code>
      <code>testTypeHintFromReflection</code>
      <code>testTypeHintFromReflectionGeneratedCode</code>
      <code>testTypeHintWithValidClassName</code>
      <code>testTypehintsWithNamespaceInNamepsacedClassReturnTypewithBackslash</code>
      <code>testVariadicArgumentFromReflection</code>
    </MissingReturnType>
    <PossiblyNullArgument occurrences="1">
      <code>$parameter[3]</code>
    </PossiblyNullArgument>
  </file>
  <file src="test/Generator/PropertyGeneratorTest.php">
    <DeprecatedMethod occurrences="1">
      <code>self::assertAttributeEquals(true, 'omitDefaultValue', $propertyGenerator)</code>
    </DeprecatedMethod>
    <InvalidArgument occurrences="2">
      <code>[PropertyGenerator::FLAG_CONSTANT, $flag]</code>
      <code>new \stdClass()</code>
    </InvalidArgument>
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1">
      <code>bool[][]|string[][]|int[][]|null[][]</code>
    </InvalidReturnType>
    <MissingReturnType occurrences="1">
      <code>testOmitType</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="1">
      <code>Generator</code>
    </MixedInferredReturnType>
    <PossiblyInvalidArgument occurrences="1">
      <code>testSetTypeSetValueGenerate</code>
    </PossiblyInvalidArgument>
    <RedundantCondition occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/PropertyValueGeneratorTest.php">
    <MissingReturnType occurrences="1">
      <code>testPropertyValueAddsSemicolonToValueGenerator</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/TraitGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>'LaminasTest_Code_NsTest_BarClass'</code>
    </ArgumentTypeCoercion>
    <InvalidArgument occurrences="1">
      <code>ExceptionInterface::class</code>
    </InvalidArgument>
    <InvalidScalarArgument occurrences="2">
      <code>true</code>
      <code>true</code>
    </InvalidScalarArgument>
    <MissingReturnType occurrences="34">
      <code>testAbstractAccessorsReturnsFalse</code>
      <code>testAddOneUseTwiceOnlyAddsOne</code>
      <code>testAddOneUseWithAliasTwiceOnlyAddsOne</code>
      <code>testAddUses</code>
      <code>testClassDocBlockAccessors</code>
      <code>testClassFromReflectionDiscardParentImplementedInterfaces</code>
      <code>testClassFromReflectionThatImplementsInterfaces</code>
      <code>testCodeGenerationShouldTakeIntoAccountNamespacesFromReflection</code>
      <code>testConstruction</code>
      <code>testCreateFromArrayWithDocBlockFromArray</code>
      <code>testCreateFromArrayWithDocBlockInstance</code>
      <code>testExtendedClassAccessors</code>
      <code>testExtendedClassProperies</code>
      <code>testGenerateClassAndAddMethod</code>
      <code>testHasMethod</code>
      <code>testHasMethodInsensitive</code>
      <code>testHasProperty</code>
      <code>testImplementedInterfacesAccessors</code>
      <code>testMethodAccessors</code>
      <code>testNameAccessors</code>
      <code>testNonNamespaceClassReturnsAllMethods</code>
      <code>testPassingANamespacedClassnameShouldGenerateAClassnameWithoutItsNamespace</code>
      <code>testPassingANamespacedClassnameShouldGenerateANamespaceDeclaration</code>
      <code>testPropertyAccessors</code>
      <code>testRemoveMethod</code>
      <code>testRemoveMethodInsensitive</code>
      <code>testSetMethodNameAlreadyExistsThrowsException</code>
      <code>testSetMethodNoMethodOrArrayThrowsException</code>
      <code>testSetNameShouldDetermineIfNamespaceSegmentIsPresent</code>
      <code>testSetPropertyAlreadyExistsThrowsException</code>
      <code>testSetPropertyNoArrayOrPropertyThrowsException</code>
      <code>testSetextendedclassShouldIgnoreEmptyClassnameOnGenerate</code>
      <code>testSetextendedclassShouldNotIgnoreNonEmptyClassnameOnGenerate</code>
      <code>testToString</code>
    </MissingReturnType>
    <MixedArgument occurrences="12">
      <code>$code</code>
      <code>$code</code>
      <code>$code</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$output</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
    </MixedArgument>
    <MixedAssignment occurrences="11">
      <code>$code</code>
      <code>$code</code>
      <code>$code</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$generated</code>
      <code>$output</code>
      <code>$output</code>
      <code>$received</code>
      <code>$received</code>
      <code>$received</code>
    </MixedAssignment>
    <RedundantCondition occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType occurrences="2">
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/TypeGeneratorTest.php">
    <MissingReturnType occurrences="5">
      <code>testFromValidTypeString</code>
      <code>testIsAGenerator</code>
      <code>testRejectsInvalidTypeString</code>
      <code>testStringCastFromValidTypeString</code>
      <code>testStripsPrefixingBackslashFromClassNames</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/ValueGeneratorTest.php">
    <DuplicateArrayKey occurrences="1">
      <code>3 =&gt; 'e'</code>
    </DuplicateArrayKey>
    <InvalidArgument occurrences="1">
      <code>$constants</code>
    </InvalidArgument>
    <MissingReturnType occurrences="13">
      <code>constantsType</code>
      <code>testAllowedPossibleConstantsType</code>
      <code>testDefaultInstance</code>
      <code>testEscaping</code>
      <code>testInvalidConstantsType</code>
      <code>testPropertyDefaultValueCanHandleArray</code>
      <code>testPropertyDefaultValueCanHandleArrayWithUnsortedKeys</code>
      <code>testPropertyDefaultValueCanHandleComplexArrayOfTypes</code>
      <code>testPropertyDefaultValueCanHandleStrings</code>
      <code>testPropertyDefaultValueCanHandleUnquotedString</code>
      <code>testPropertyDefaultValueConstructor</code>
      <code>testPropertyDefaultValueIsSettable</code>
      <code>testValidConstantTypes</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="6">
      <code>Generator</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
    <RedundantCondition occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantCondition>
  </file>
  <file src="test/Generic/Prototype/PrototypeClassFactoryTest.php">
    <DeprecatedMethod occurrences="1">
      <code>setMethods</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="3">
      <code>testAddAndGetPrototype</code>
      <code>testFallBackToGeneric</code>
      <code>testSetNameOnGenericIsCalledOnce</code>
    </MissingReturnType>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/NameInformationTest.php">
    <MissingReturnType occurrences="3">
      <code>testNamespaceResolverCorrectlyResolvesNames</code>
      <code>testNamespaceResolverPersistsNamespace</code>
      <code>testNamespaceResolverPersistsUseRules</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/ClassReflectionTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>'ReflectionClass'</code>
    </ArgumentTypeCoercion>
    <MissingReturnType occurrences="12">
      <code>testGetAnnotationsWithNoNameInformations</code>
      <code>testGetContentsReturnsContents</code>
      <code>testGetContentsReturnsContentsWithImplementsOnSeparateLine</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetDeclaringFileReturnsFilename</code>
      <code>testGetTraits</code>
      <code>testInterfaceReturn</code>
      <code>testMethodReturns</code>
      <code>testParentReturn</code>
      <code>testPropertyReturns</code>
      <code>testStartLine</code>
    </MissingReturnType>
    <PossiblyInvalidArgument occurrences="1">
      <code>$parent</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidMethodCall occurrences="1">
      <code>getName</code>
    </PossiblyInvalidMethodCall>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertInstanceOf</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/AuthorTagTest.php">
    <MissingReturnType occurrences="2">
      <code>testParseName</code>
      <code>testParseNameAndEmail</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/GenericTagTest.php">
    <MissingReturnType occurrences="1">
      <code>testParse</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/LicenseTagTest.php">
    <MissingReturnType occurrences="2">
      <code>testParseUrl</code>
      <code>testParseUrlAndLicenseName</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/MethodTagTest.php">
    <DeprecatedMethod occurrences="5">
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="5">
      <code>testParseName</code>
      <code>testParseNameAndStatic</code>
      <code>testParseNameAndStaticAndDescription</code>
      <code>testParseNameAndType</code>
      <code>testParseNameAndTypeAndStaticAndDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/PropertyTagTest.php">
    <DeprecatedMethod occurrences="4">
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="4">
      <code>testParseName</code>
      <code>testParseNameAndDescription</code>
      <code>testParseTypeAndName</code>
      <code>testParseTypeAndNameAndDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/ThrowsTagTest.php">
    <MissingReturnType occurrences="5">
      <code>testAllCharactersFromTypenameAreSupported</code>
      <code>testMultipleTypesWithDescription</code>
      <code>testMultipleTypesWithoutDescription</code>
      <code>testSingleTypeWithDescription</code>
      <code>testSingleTypeWithoutDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/VarTagTest.php">
    <MissingReturnType occurrences="1">
      <code>testParse</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="1">
      <code>array</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/Reflection/DocBlockReflectionTest.php">
    <DeprecatedMethod occurrences="5">
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="9">
      <code>testDocBlockContents</code>
      <code>testDocBlockLines</code>
      <code>testDocBlockLongDescription</code>
      <code>testDocBlockShortDescription</code>
      <code>testDocBlockTags</code>
      <code>testFunctionDocBlockTags</code>
      <code>testShortDocBlocks</code>
      <code>testTabbedDocBlockTags</code>
      <code>testToString</code>
    </MissingReturnType>
    <PossiblyFalseReference occurrences="26">
      <code>getContents</code>
      <code>getLongDescription</code>
      <code>getShortDescription</code>
      <code>getShortDescription</code>
      <code>getShortDescription</code>
      <code>getStartLine</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>hasTag</code>
      <code>hasTag</code>
    </PossiblyFalseReference>
    <UndefinedInterfaceMethod occurrences="4">
      <code>getDescription</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Reflection/FileReflectionTest.php">
    <MissingReturnType occurrences="15">
      <code>testFileCanReflectFileWithInterface</code>
      <code>testFileCanReflectFileWithUses</code>
      <code>testFileConstructorFromAReflectedFilenameInIncludePath</code>
      <code>testFileConstructorFromAReflectedFilenameInIncludePathWithoutIncludeFlagEnabled</code>
      <code>testFileConstructorFromAReflectedFilenameIncluded</code>
      <code>testFileConstructorThrowsExceptionOnNonExistentFile</code>
      <code>testFileGetClassReturnsClassReflectionObject</code>
      <code>testFileGetClassReturnsFirstClassWithNoOptions</code>
      <code>testFileGetClassThrowsExceptionOnNonExistentClassName</code>
      <code>testFileGetDocBlockReturnsFileDocBlock</code>
      <code>testFileGetFilenameReturnsCorrectFilename</code>
      <code>testFileGetFunctionsReturnsFunctions</code>
      <code>testFileGetLineNumbersWorks</code>
      <code>testFileReflectionShouldNotRaiseNoticesWhenReflectingClosures</code>
      <code>testFileReflectorRequiredFunctionsDoNothing</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>$reflectionFile-&gt;getClasses()</code>
    </MixedArgument>
    <MixedAssignment occurrences="3">
      <code>$authorTag</code>
      <code>$class</code>
      <code>$funcs</code>
    </MixedAssignment>
    <UnresolvableInclude occurrences="8">
      <code>include_once $fileToReflect</code>
      <code>include_once $fileToReflect</code>
      <code>include_once $fileToReflect</code>
      <code>include_once $fileToReflect</code>
      <code>include_once $fileToReflect</code>
      <code>include_once $fileToReflect</code>
      <code>include_once $fileToReflect</code>
      <code>include_once $fileToRequire</code>
    </UnresolvableInclude>
  </file>
  <file src="test/Reflection/FunctionReflectionTest.php">
    <MissingReturnType occurrences="13">
      <code>testFunctionBodyReturn</code>
      <code>testFunctionClosureBodyReturn</code>
      <code>testFunctionClosureContentsReturnWithDocBlock</code>
      <code>testFunctionClosureContentsReturnWithoutDocBlock</code>
      <code>testFunctionContentsReturnWithDocBlock</code>
      <code>testFunctionContentsReturnWithoutDocBlock</code>
      <code>testFunctionDocBlockReturn</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetPrototypeMethod</code>
      <code>testInternalFunctionBodyReturn</code>
      <code>testInternalFunctionContentsReturn</code>
      <code>testParemeterReturn</code>
    </MissingReturnType>
    <MixedArgument occurrences="14">
      <code>$function1</code>
      <code>$function10</code>
      <code>$function10</code>
      <code>$function2</code>
      <code>$function2</code>
      <code>$function3</code>
      <code>$function4</code>
      <code>$function5</code>
      <code>$function6</code>
      <code>$function7</code>
      <code>$function8</code>
      <code>$function9</code>
      <code>$function9</code>
      <code>$function9</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="3">
      <code>$list1['closure']</code>
      <code>$list2[0]</code>
      <code>$list3[0]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="3">
      <code>$function5</code>
      <code>$function6</code>
      <code>$function7</code>
    </MixedAssignment>
    <PossiblyFalseArgument occurrences="18">
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
    </PossiblyFalseArgument>
    <UndefinedGlobalVariable occurrences="14">
      <code>$function1</code>
      <code>$function10</code>
      <code>$function10</code>
      <code>$function2</code>
      <code>$function2</code>
      <code>$function3</code>
      <code>$function4</code>
      <code>$function8</code>
      <code>$function9</code>
      <code>$function9</code>
      <code>$function9</code>
      <code>$list1</code>
      <code>$list2</code>
      <code>$list3</code>
    </UndefinedGlobalVariable>
  </file>
  <file src="test/Reflection/MethodReflectionTest.php">
    <ArgumentTypeCoercion occurrences="6">
      <code>'DOMDocument'</code>
      <code>'DOMDocument'</code>
      <code>'DateTime'</code>
      <code>'FooClass'</code>
      <code>'ReflectionClass'</code>
      <code>'ReflectionException'</code>
    </ArgumentTypeCoercion>
    <MissingReturnType occurrences="16">
      <code>testCanParseClassBodyWhenUsingTrait</code>
      <code>testCodeGetBodyReturnsEmptyWithCommentedFunction</code>
      <code>testCodeGetContentsDoesNotThrowExceptionOnDocBlock</code>
      <code>testDeclaringClassReturn</code>
      <code>testFunctionContentsReturnWithDocBlock</code>
      <code>testGetAnnotationsWithNoNameInformations</code>
      <code>testGetBodyReturnsCorrectBody</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetContentsWithCoreClass</code>
      <code>testGetPrototypeMethod</code>
      <code>testInternalFunctionBodyReturn</code>
      <code>testInternalMethodContentsReturn</code>
      <code>testMethodContentsReturnWithoutDocBlock</code>
      <code>testParemeterReturn</code>
      <code>testStartLine</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/ParameterReflectionTest.php">
    <MissingReturnType occurrences="10">
      <code>paramType</code>
      <code>testCallableTypeHint</code>
      <code>testClassReturn</code>
      <code>testClassReturnNoClassGivenReturnsNull</code>
      <code>testDeclaringClassReturn</code>
      <code>testDetectType</code>
      <code>testDetectTypeWithDocBlockOnlyTypes</code>
      <code>testGetType</code>
      <code>testGetTypeWithDocBlockOnlyTypes</code>
      <code>testTypeReturn</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/PropertyReflectionTest.php">
    <MissingReturnType occurrences="3">
      <code>testAnnotationScanningIsPossible</code>
      <code>testDeclaringClassReturn</code>
      <code>testGetAnnotationsWithNoNameInformations</code>
    </MissingReturnType>
    <MixedAssignment occurrences="1">
      <code>$annotation</code>
    </MixedAssignment>
  </file>
  <file src="test/Reflection/ReflectionDocBlockTagTest.php">
    <MissingReturnType occurrences="12">
      <code>testAllowsMultipleSpacesInDocBlockTagLine</code>
      <code>testAllowsMultipleSpacesInDocBlockTagLine2</code>
      <code>testNamespaceInParam</code>
      <code>testPropertyVarDoc</code>
      <code>testReturnClassWithNamespace</code>
      <code>testTagDescriptionIsReturned</code>
      <code>testTagShouldAllowJustTagNameInDocBlockTagLine</code>
      <code>testTagShouldAllowMultipleWhitespacesBeforeDescription</code>
      <code>testToString</code>
      <code>testType</code>
      <code>testTypeParam</code>
      <code>testVariableName</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="1">
      <code>array</code>
    </MixedInferredReturnType>
    <PossiblyFalseReference occurrences="29">
      <code>getAuthorEmail</code>
      <code>getAuthorName</code>
      <code>getContent</code>
      <code>getContent</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getName</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
    </PossiblyFalseReference>
    <PossiblyInvalidCast occurrences="1">
      <code>$tag</code>
    </PossiblyInvalidCast>
    <UndefinedInterfaceMethod occurrences="16">
      <code>getAuthorEmail</code>
      <code>getAuthorName</code>
      <code>getContent</code>
      <code>getContent</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Scanner/AggregateDirectoryScannerTest.php">
    <MissingReturnType occurrences="1">
      <code>testAggregationOfDirectories</code>
    </MissingReturnType>
  </file>
  <file src="test/Scanner/AnnotationScannerTest.php">
    <MissingReturnType occurrences="2">
      <code>newLine</code>
      <code>testScannerWorks</code>
    </MissingReturnType>
    <MixedArgument occurrences="2">
      <code>$annotationScanner[0]</code>
      <code>$annotationScanner[1]</code>
    </MixedArgument>
    <MixedMethodCall occurrences="1">
      <code>getContent</code>
    </MixedMethodCall>
  </file>
  <file src="test/Scanner/CachingFileScannerTest.php">
    <MissingReturnType occurrences="4">
      <code>assertDifferentInternalFileScanner</code>
      <code>assertSameInternalFileScanner</code>
      <code>getCacheCount</code>
      <code>testCachingFileScannerWillUseSameInternalFileScannerWithMatchingFileNameAnAnnotationManagerObject</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>$cacheProp-&gt;getValue($cfs)</code>
    </MixedArgument>
  </file>
  <file src="test/Scanner/ClassScannerTest.php">
    <MissingDependency occurrences="14">
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
      <code>FooClass</code>
    </MissingDependency>
    <MissingPropertyType occurrences="1">
      <code>$manager</code>
    </MissingPropertyType>
    <MissingReturnType occurrences="24">
      <code>testAbstractClassIsNotInstantiable</code>
      <code>testClassIsInstantiable</code>
      <code>testClassScannerCanGetTraitMethodsInGetMethods</code>
      <code>testClassScannerCanReturnLineNumbers</code>
      <code>testClassScannerCanScanAnnotations</code>
      <code>testClassScannerCanScanClassAndGetTraitsAliases</code>
      <code>testClassScannerCanScanClassThatUsesTraits</code>
      <code>testClassScannerCanScanInterface</code>
      <code>testClassScannerCanScanTraits</code>
      <code>testClassScannerHasClassInformation</code>
      <code>testClassScannerHasConstant</code>
      <code>testClassScannerHasMethods</code>
      <code>testClassScannerHasProperties</code>
      <code>testClassScannerReturnsMethodsWithMethodScanners</code>
      <code>testClassScannerReturnsPropertiesWithPropertyScanners</code>
      <code>testGetConstantsReturnsConstantNames</code>
      <code>testGetConstantsReturnsInstancesOfConstantScanner</code>
      <code>testGetInterfacesFromInterface</code>
      <code>testGetMethodsThrowsExceptionOnDuplicateMethods</code>
      <code>testHasConstant</code>
      <code>testHasMethod</code>
      <code>testHasProperty</code>
      <code>testInterfaceIsNotInstantiable</code>
      <code>testTraitIsNotInstantiable</code>
    </MissingReturnType>
    <MixedArgument occurrences="15">
      <code>$method-&gt;getBody</code>
      <code>$this-&gt;manager</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
    </MixedArgument>
    <MixedPropertyFetch occurrences="3">
      <code>$annotations[0]-&gt;content</code>
      <code>$annotations[1]-&gt;content</code>
      <code>$annotations[2]-&gt;content</code>
    </MixedPropertyFetch>
    <PossiblyFalseReference occurrences="25">
      <code>getAnnotations</code>
      <code>getConstantNames</code>
      <code>getConstants</code>
      <code>getConstants</code>
      <code>getLineStart</code>
      <code>getLineStart</code>
      <code>getMethodNames</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getName</code>
      <code>getName</code>
      <code>getProperties</code>
      <code>getPropertyNames</code>
      <code>hasConstant</code>
      <code>hasMethod</code>
      <code>hasProperty</code>
      <code>isAbstract</code>
      <code>isAbstract</code>
      <code>isInterface</code>
      <code>isInterface</code>
      <code>isTrait</code>
      <code>isTrait</code>
      <code>isTrait</code>
      <code>isTrait</code>
      <code>isTrait</code>
    </PossiblyFalseReference>
    <RedundantConditionGivenDocblockType occurrences="4">
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
      <code>assertInstanceOf</code>
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType occurrences="2">
      <code>$testMethod === 'bar'</code>
      <code>$testMethod === 'bar'</code>
    </TypeDoesNotContainType>
    <UndefinedPropertyFetch occurrences="1">
      <code>$method-&gt;getBody</code>
    </UndefinedPropertyFetch>
  </file>
  <file src="test/Scanner/ConstantScannerTest.php">
    <MissingDependency occurrences="1">
      <code>FooClass</code>
    </MissingDependency>
    <MissingReturnType occurrences="1">
      <code>testConstantScannerHasConstantInformation</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>FooClass::class</code>
    </MixedArgument>
    <PossiblyFalseReference occurrences="1">
      <code>getConstant</code>
    </PossiblyFalseReference>
    <PossiblyInvalidMethodCall occurrences="7">
      <code>getDocComment</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
    </PossiblyInvalidMethodCall>
  </file>
  <file src="test/Scanner/DerivedClassScannerTest.php">
    <MissingReturnType occurrences="1">
      <code>testCreatesClass</code>
    </MissingReturnType>
  </file>
  <file src="test/Scanner/DocBlockScannerTest.php">
    <MissingReturnType occurrences="2">
      <code>testDocBlockScannerDescriptions</code>
      <code>testDocBlockScannerParsesTagsWithNoValuesProperly</code>
    </MissingReturnType>
    <MixedArgument occurrences="2">
      <code>$tags[0]</code>
      <code>$tags[0]</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="2">
      <code>$tags[0]['name']</code>
      <code>$tags[0]['value']</code>
    </MixedArrayAccess>
  </file>
  <file src="test/Scanner/FileScannerTest.php">
    <MissingReturnType occurrences="1">
      <code>testFileScannerCanReturnClasses</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>Baz::class</code>
    </MixedArgument>
    <PossiblyFalseReference occurrences="2">
      <code>getName</code>
      <code>getName</code>
    </PossiblyFalseReference>
    <UndefinedClass occurrences="2">
      <code>Baz</code>
      <code>Baz</code>
    </UndefinedClass>
  </file>
  <file src="test/Scanner/MethodScannerTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>'\Laminas\Code\Exception\InvalidArgumentException'</code>
    </ArgumentTypeCoercion>
    <MissingDependency occurrences="1">
      <code>FooClass</code>
    </MissingDependency>
    <MissingReturnType occurrences="11">
      <code>testMethodScannerHasMethodInformation</code>
      <code>testMethodScannerMethodSignatureLatestOptionalParamHasParentheses</code>
      <code>testMethodScannerParsesClassNames</code>
      <code>testMethodScannerReturnsBodyMethods</code>
      <code>testMethodScannerReturnsLineNumbersForMethods</code>
      <code>testMethodScannerReturnsParameterScanner</code>
      <code>testMethodScannerReturnsParameters</code>
      <code>testMethodScannerReturnsPropertyWithNoDefault</code>
      <code>testMethodScannerSetVisibilityAcceptsIntegerTokens</code>
      <code>testMethodScannerSetVisibilityThrowsInvalidArgumentException</code>
      <code>testMethodScannerWorksWithSingleAbstractFunction</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>FooClass::class</code>
    </MixedArgument>
    <PossiblyFalseReference occurrences="9">
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethod</code>
    </PossiblyFalseReference>
    <RedundantConditionGivenDocblockType occurrences="2">
      <code>assertInstanceOf</code>
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Scanner/ParameterScannerTest.php">
    <MissingReturnType occurrences="1">
      <code>testParameterScannerHasParameterInformation</code>
    </MissingReturnType>
    <PossiblyFalseReference occurrences="1">
      <code>getMethod</code>
    </PossiblyFalseReference>
  </file>
  <file src="test/Scanner/PropertyScannerTest.php">
    <DocblockTypeContradiction occurrences="1">
      <code>assertNull</code>
    </DocblockTypeContradiction>
    <MissingDependency occurrences="1">
      <code>FooClass</code>
    </MissingDependency>
    <MissingReturnType occurrences="3">
      <code>testPropertyScannerHasPropertyInformation</code>
      <code>testPropertyScannerReturnsProperValue</code>
      <code>testPropertyScannerReturnsProperValueRegardlessOfOrder</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>FooClass::class</code>
    </MixedArgument>
    <PossiblyFalseReference occurrences="3">
      <code>getProperties</code>
      <code>getProperty</code>
      <code>getProperty</code>
    </PossiblyFalseReference>
    <PossiblyInvalidMethodCall occurrences="22">
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValueType</code>
      <code>getValueType</code>
      <code>isPrivate</code>
      <code>isPrivate</code>
      <code>isPrivate</code>
      <code>isProtected</code>
      <code>isProtected</code>
      <code>isProtected</code>
      <code>isPublic</code>
      <code>isPublic</code>
      <code>isPublic</code>
      <code>isStatic</code>
      <code>isStatic</code>
      <code>isStatic</code>
    </PossiblyInvalidMethodCall>
  </file>
  <file src="test/Scanner/TokenArrayScannerTest.php">
    <MissingDependency occurrences="1">
      <code>FooClass</code>
    </MissingDependency>
    <MissingReturnType occurrences="7">
      <code>testScannerCanHandleMultipleNamespaceFile</code>
      <code>testScannerReturnsClassNames</code>
      <code>testScannerReturnsClassNamesForTraits</code>
      <code>testScannerReturnsClassScanner</code>
      <code>testScannerReturnsFunctions</code>
      <code>testScannerReturnsNamespaces</code>
      <code>testScannerReturnsNamespacesInNotNamespacedClasses</code>
    </MissingReturnType>
    <MixedArgument occurrences="1">
      <code>Baz::class</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="1">
      <code>$use['use']</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="2">
      <code>$foundUses[]</code>
      <code>$use</code>
    </MixedAssignment>
    <PossiblyFalseReference occurrences="2">
      <code>getName</code>
      <code>getName</code>
    </PossiblyFalseReference>
    <RedundantConditionGivenDocblockType occurrences="6">
      <code>assertInstanceOf</code>
      <code>assertIsArray</code>
      <code>assertIsArray</code>
      <code>assertIsArray</code>
      <code>assertIsArray</code>
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass occurrences="2">
      <code>Baz</code>
      <code>Baz</code>
    </UndefinedClass>
  </file>
</files>
